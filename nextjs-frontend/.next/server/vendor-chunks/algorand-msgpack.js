"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/algorand-msgpack";
exports.ids = ["vendor-chunks/algorand-msgpack"];
exports.modules = {

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/CachedKeyDecoder.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/CachedKeyDecoder.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CachedKeyDecoder: () => (/* binding */ CachedKeyDecoder)\n/* harmony export */ });\n/* harmony import */ var _utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utf8.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/utf8.mjs\");\n\nvar DEFAULT_MAX_KEY_LENGTH = 16;\nvar DEFAULT_MAX_LENGTH_PER_KEY = 16;\nvar CachedKeyDecoder = /** @class */ function() {\n    function CachedKeyDecoder(maxKeyLength, maxLengthPerKey) {\n        if (maxKeyLength === void 0) {\n            maxKeyLength = DEFAULT_MAX_KEY_LENGTH;\n        }\n        if (maxLengthPerKey === void 0) {\n            maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY;\n        }\n        this.maxKeyLength = maxKeyLength;\n        this.maxLengthPerKey = maxLengthPerKey;\n        this.hit = 0;\n        this.miss = 0;\n        // avoid `new Array(N)`, which makes a sparse array,\n        // because a sparse array is typically slower than a non-sparse array.\n        this.caches = [];\n        for(var i = 0; i < this.maxKeyLength; i++){\n            this.caches.push([]);\n        }\n    }\n    CachedKeyDecoder.prototype.canBeCached = function(byteLength) {\n        return byteLength > 0 && byteLength <= this.maxKeyLength;\n    };\n    CachedKeyDecoder.prototype.find = function(bytes, inputOffset, byteLength) {\n        var records = this.caches[byteLength - 1];\n        FIND_CHUNK: for(var _i = 0, records_1 = records; _i < records_1.length; _i++){\n            var record = records_1[_i];\n            var recordBytes = record.bytes;\n            for(var j = 0; j < byteLength; j++){\n                if (recordBytes[j] !== bytes[inputOffset + j]) {\n                    continue FIND_CHUNK;\n                }\n            }\n            return record.str;\n        }\n        return null;\n    };\n    CachedKeyDecoder.prototype.store = function(bytes, value) {\n        var records = this.caches[bytes.length - 1];\n        var record = {\n            bytes: bytes,\n            str: value\n        };\n        if (records.length >= this.maxLengthPerKey) {\n            // `records` are full!\n            // Set `record` to an arbitrary position.\n            records[Math.random() * records.length | 0] = record;\n        } else {\n            records.push(record);\n        }\n    };\n    CachedKeyDecoder.prototype.decode = function(bytes, inputOffset, byteLength) {\n        var cachedValue = this.find(bytes, inputOffset, byteLength);\n        if (cachedValue != null) {\n            this.hit++;\n            return cachedValue;\n        }\n        this.miss++;\n        var str = (0,_utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_0__.utf8DecodeJs)(bytes, inputOffset, byteLength);\n        // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n        var slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n        this.store(slicedCopyOfBytes, str);\n        return str;\n    };\n    return CachedKeyDecoder;\n}();\n //# sourceMappingURL=CachedKeyDecoder.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vQ2FjaGVkS2V5RGVjb2Rlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBZ0Q7QUFDaEQsSUFBSUMseUJBQXlCO0FBQzdCLElBQUlDLDZCQUE2QjtBQUNqQyxJQUFJQyxtQkFBbUIsV0FBVyxHQUFJO0lBQ2xDLFNBQVNBLGlCQUFpQkMsWUFBWSxFQUFFQyxlQUFlO1FBQ25ELElBQUlELGlCQUFpQixLQUFLLEdBQUc7WUFBRUEsZUFBZUg7UUFBd0I7UUFDdEUsSUFBSUksb0JBQW9CLEtBQUssR0FBRztZQUFFQSxrQkFBa0JIO1FBQTRCO1FBQ2hGLElBQUksQ0FBQ0UsWUFBWSxHQUFHQTtRQUNwQixJQUFJLENBQUNDLGVBQWUsR0FBR0E7UUFDdkIsSUFBSSxDQUFDQyxHQUFHLEdBQUc7UUFDWCxJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLG9EQUFvRDtRQUNwRCxzRUFBc0U7UUFDdEUsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtRQUNoQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxJQUFJLENBQUNMLFlBQVksRUFBRUssSUFBSztZQUN4QyxJQUFJLENBQUNELE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLEVBQUU7UUFDdkI7SUFDSjtJQUNBUCxpQkFBaUJRLFNBQVMsQ0FBQ0MsV0FBVyxHQUFHLFNBQVVDLFVBQVU7UUFDekQsT0FBT0EsYUFBYSxLQUFLQSxjQUFjLElBQUksQ0FBQ1QsWUFBWTtJQUM1RDtJQUNBRCxpQkFBaUJRLFNBQVMsQ0FBQ0csSUFBSSxHQUFHLFNBQVVDLEtBQUssRUFBRUMsV0FBVyxFQUFFSCxVQUFVO1FBQ3RFLElBQUlJLFVBQVUsSUFBSSxDQUFDVCxNQUFNLENBQUNLLGFBQWEsRUFBRTtRQUN6Q0ssWUFBWSxJQUFLLElBQUlDLEtBQUssR0FBR0MsWUFBWUgsU0FBU0UsS0FBS0MsVUFBVUMsTUFBTSxFQUFFRixLQUFNO1lBQzNFLElBQUlHLFNBQVNGLFNBQVMsQ0FBQ0QsR0FBRztZQUMxQixJQUFJSSxjQUFjRCxPQUFPUCxLQUFLO1lBQzlCLElBQUssSUFBSVMsSUFBSSxHQUFHQSxJQUFJWCxZQUFZVyxJQUFLO2dCQUNqQyxJQUFJRCxXQUFXLENBQUNDLEVBQUUsS0FBS1QsS0FBSyxDQUFDQyxjQUFjUSxFQUFFLEVBQUU7b0JBQzNDLFNBQVNOO2dCQUNiO1lBQ0o7WUFDQSxPQUFPSSxPQUFPRyxHQUFHO1FBQ3JCO1FBQ0EsT0FBTztJQUNYO0lBQ0F0QixpQkFBaUJRLFNBQVMsQ0FBQ2UsS0FBSyxHQUFHLFNBQVVYLEtBQUssRUFBRVksS0FBSztRQUNyRCxJQUFJVixVQUFVLElBQUksQ0FBQ1QsTUFBTSxDQUFDTyxNQUFNTSxNQUFNLEdBQUcsRUFBRTtRQUMzQyxJQUFJQyxTQUFTO1lBQUVQLE9BQU9BO1lBQU9VLEtBQUtFO1FBQU07UUFDeEMsSUFBSVYsUUFBUUksTUFBTSxJQUFJLElBQUksQ0FBQ2hCLGVBQWUsRUFBRTtZQUN4QyxzQkFBc0I7WUFDdEIseUNBQXlDO1lBQ3pDWSxPQUFPLENBQUMsS0FBTVksTUFBTSxLQUFLWixRQUFRSSxNQUFNLEdBQUksRUFBRSxHQUFHQztRQUNwRCxPQUNLO1lBQ0RMLFFBQVFQLElBQUksQ0FBQ1k7UUFDakI7SUFDSjtJQUNBbkIsaUJBQWlCUSxTQUFTLENBQUNtQixNQUFNLEdBQUcsU0FBVWYsS0FBSyxFQUFFQyxXQUFXLEVBQUVILFVBQVU7UUFDeEUsSUFBSWtCLGNBQWMsSUFBSSxDQUFDakIsSUFBSSxDQUFDQyxPQUFPQyxhQUFhSDtRQUNoRCxJQUFJa0IsZUFBZSxNQUFNO1lBQ3JCLElBQUksQ0FBQ3pCLEdBQUc7WUFDUixPQUFPeUI7UUFDWDtRQUNBLElBQUksQ0FBQ3hCLElBQUk7UUFDVCxJQUFJa0IsTUFBTXpCLDZEQUFZQSxDQUFDZSxPQUFPQyxhQUFhSDtRQUMzQyw0SUFBNEk7UUFDNUksSUFBSW1CLG9CQUFvQkMsV0FBV3RCLFNBQVMsQ0FBQ3VCLEtBQUssQ0FBQ0MsSUFBSSxDQUFDcEIsT0FBT0MsYUFBYUEsY0FBY0g7UUFDMUYsSUFBSSxDQUFDYSxLQUFLLENBQUNNLG1CQUFtQlA7UUFDOUIsT0FBT0E7SUFDWDtJQUNBLE9BQU90QjtBQUNYO0FBQzRCLENBQzVCLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NlbHRyYS1hbW0tZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vQ2FjaGVkS2V5RGVjb2Rlci5tanM/MWZkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1dGY4RGVjb2RlSnMgfSBmcm9tIFwiLi91dGlscy91dGY4Lm1qc1wiO1xudmFyIERFRkFVTFRfTUFYX0tFWV9MRU5HVEggPSAxNjtcbnZhciBERUZBVUxUX01BWF9MRU5HVEhfUEVSX0tFWSA9IDE2O1xudmFyIENhY2hlZEtleURlY29kZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2FjaGVkS2V5RGVjb2RlcihtYXhLZXlMZW5ndGgsIG1heExlbmd0aFBlcktleSkge1xuICAgICAgICBpZiAobWF4S2V5TGVuZ3RoID09PSB2b2lkIDApIHsgbWF4S2V5TGVuZ3RoID0gREVGQVVMVF9NQVhfS0VZX0xFTkdUSDsgfVxuICAgICAgICBpZiAobWF4TGVuZ3RoUGVyS2V5ID09PSB2b2lkIDApIHsgbWF4TGVuZ3RoUGVyS2V5ID0gREVGQVVMVF9NQVhfTEVOR1RIX1BFUl9LRVk7IH1cbiAgICAgICAgdGhpcy5tYXhLZXlMZW5ndGggPSBtYXhLZXlMZW5ndGg7XG4gICAgICAgIHRoaXMubWF4TGVuZ3RoUGVyS2V5ID0gbWF4TGVuZ3RoUGVyS2V5O1xuICAgICAgICB0aGlzLmhpdCA9IDA7XG4gICAgICAgIHRoaXMubWlzcyA9IDA7XG4gICAgICAgIC8vIGF2b2lkIGBuZXcgQXJyYXkoTilgLCB3aGljaCBtYWtlcyBhIHNwYXJzZSBhcnJheSxcbiAgICAgICAgLy8gYmVjYXVzZSBhIHNwYXJzZSBhcnJheSBpcyB0eXBpY2FsbHkgc2xvd2VyIHRoYW4gYSBub24tc3BhcnNlIGFycmF5LlxuICAgICAgICB0aGlzLmNhY2hlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubWF4S2V5TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVzLnB1c2goW10pO1xuICAgICAgICB9XG4gICAgfVxuICAgIENhY2hlZEtleURlY29kZXIucHJvdG90eXBlLmNhbkJlQ2FjaGVkID0gZnVuY3Rpb24gKGJ5dGVMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGJ5dGVMZW5ndGggPiAwICYmIGJ5dGVMZW5ndGggPD0gdGhpcy5tYXhLZXlMZW5ndGg7XG4gICAgfTtcbiAgICBDYWNoZWRLZXlEZWNvZGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKGJ5dGVzLCBpbnB1dE9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgICAgICB2YXIgcmVjb3JkcyA9IHRoaXMuY2FjaGVzW2J5dGVMZW5ndGggLSAxXTtcbiAgICAgICAgRklORF9DSFVOSzogZm9yICh2YXIgX2kgPSAwLCByZWNvcmRzXzEgPSByZWNvcmRzOyBfaSA8IHJlY29yZHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciByZWNvcmQgPSByZWNvcmRzXzFbX2ldO1xuICAgICAgICAgICAgdmFyIHJlY29yZEJ5dGVzID0gcmVjb3JkLmJ5dGVzO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBieXRlTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkQnl0ZXNbal0gIT09IGJ5dGVzW2lucHV0T2Zmc2V0ICsgal0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWUgRklORF9DSFVOSztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkLnN0cjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIENhY2hlZEtleURlY29kZXIucHJvdG90eXBlLnN0b3JlID0gZnVuY3Rpb24gKGJ5dGVzLCB2YWx1ZSkge1xuICAgICAgICB2YXIgcmVjb3JkcyA9IHRoaXMuY2FjaGVzW2J5dGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgcmVjb3JkID0geyBieXRlczogYnl0ZXMsIHN0cjogdmFsdWUgfTtcbiAgICAgICAgaWYgKHJlY29yZHMubGVuZ3RoID49IHRoaXMubWF4TGVuZ3RoUGVyS2V5KSB7XG4gICAgICAgICAgICAvLyBgcmVjb3Jkc2AgYXJlIGZ1bGwhXG4gICAgICAgICAgICAvLyBTZXQgYHJlY29yZGAgdG8gYW4gYXJiaXRyYXJ5IHBvc2l0aW9uLlxuICAgICAgICAgICAgcmVjb3Jkc1soTWF0aC5yYW5kb20oKSAqIHJlY29yZHMubGVuZ3RoKSB8IDBdID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVjb3Jkcy5wdXNoKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENhY2hlZEtleURlY29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChieXRlcywgaW5wdXRPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICAgICAgdmFyIGNhY2hlZFZhbHVlID0gdGhpcy5maW5kKGJ5dGVzLCBpbnB1dE9mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICAgICAgIGlmIChjYWNoZWRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmhpdCsrO1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWlzcysrO1xuICAgICAgICB2YXIgc3RyID0gdXRmOERlY29kZUpzKGJ5dGVzLCBpbnB1dE9mZnNldCwgYnl0ZUxlbmd0aCk7XG4gICAgICAgIC8vIEVuc3VyZSB0byBjb3B5IGEgc2xpY2Ugb2YgYnl0ZXMgYmVjYXVzZSB0aGUgYnl0ZSBtYXkgYmUgTm9kZUpTIEJ1ZmZlciBhbmQgQnVmZmVyI3NsaWNlKCkgcmV0dXJucyBhIHJlZmVyZW5jZSB0byBpdHMgaW50ZXJuYWwgQXJyYXlCdWZmZXIuXG4gICAgICAgIHZhciBzbGljZWRDb3B5T2ZCeXRlcyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYnl0ZXMsIGlucHV0T2Zmc2V0LCBpbnB1dE9mZnNldCArIGJ5dGVMZW5ndGgpO1xuICAgICAgICB0aGlzLnN0b3JlKHNsaWNlZENvcHlPZkJ5dGVzLCBzdHIpO1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH07XG4gICAgcmV0dXJuIENhY2hlZEtleURlY29kZXI7XG59KCkpO1xuZXhwb3J0IHsgQ2FjaGVkS2V5RGVjb2RlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2FjaGVkS2V5RGVjb2Rlci5tanMubWFwIl0sIm5hbWVzIjpbInV0ZjhEZWNvZGVKcyIsIkRFRkFVTFRfTUFYX0tFWV9MRU5HVEgiLCJERUZBVUxUX01BWF9MRU5HVEhfUEVSX0tFWSIsIkNhY2hlZEtleURlY29kZXIiLCJtYXhLZXlMZW5ndGgiLCJtYXhMZW5ndGhQZXJLZXkiLCJoaXQiLCJtaXNzIiwiY2FjaGVzIiwiaSIsInB1c2giLCJwcm90b3R5cGUiLCJjYW5CZUNhY2hlZCIsImJ5dGVMZW5ndGgiLCJmaW5kIiwiYnl0ZXMiLCJpbnB1dE9mZnNldCIsInJlY29yZHMiLCJGSU5EX0NIVU5LIiwiX2kiLCJyZWNvcmRzXzEiLCJsZW5ndGgiLCJyZWNvcmQiLCJyZWNvcmRCeXRlcyIsImoiLCJzdHIiLCJzdG9yZSIsInZhbHVlIiwiTWF0aCIsInJhbmRvbSIsImRlY29kZSIsImNhY2hlZFZhbHVlIiwic2xpY2VkQ29weU9mQnl0ZXMiLCJVaW50OEFycmF5Iiwic2xpY2UiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/CachedKeyDecoder.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/DecodeError.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/DecodeError.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecodeError: () => (/* binding */ DecodeError)\n/* harmony export */ });\nvar __extends = undefined && undefined.__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar DecodeError = /** @class */ function(_super) {\n    __extends(DecodeError, _super);\n    function DecodeError(message) {\n        var _this = _super.call(this, message) || this;\n        // fix the prototype chain in a cross-platform way\n        var proto = Object.create(DecodeError.prototype);\n        Object.setPrototypeOf(_this, proto);\n        Object.defineProperty(_this, \"name\", {\n            configurable: true,\n            enumerable: false,\n            value: DecodeError.name\n        });\n        return _this;\n    }\n    return DecodeError;\n}(Error);\n //# sourceMappingURL=DecodeError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vRGVjb2RlRXJyb3IubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxZQUFZLFNBQUssSUFBSSxTQUFJLENBQUNBLFNBQVMsSUFBSztJQUN4QyxJQUFJQyxnQkFBZ0IsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDO1FBQzlCRixnQkFBZ0JHLE9BQU9DLGNBQWMsSUFDaEM7WUFBRUMsV0FBVyxFQUFFO1FBQUMsY0FBYUMsU0FBUyxTQUFVTCxDQUFDLEVBQUVDLENBQUM7WUFBSUQsRUFBRUksU0FBUyxHQUFHSDtRQUFHLEtBQzFFLFNBQVVELENBQUMsRUFBRUMsQ0FBQztZQUFJLElBQUssSUFBSUssS0FBS0wsRUFBRyxJQUFJQyxPQUFPSyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUixHQUFHSyxJQUFJTixDQUFDLENBQUNNLEVBQUUsR0FBR0wsQ0FBQyxDQUFDSyxFQUFFO1FBQUU7UUFDcEcsT0FBT1AsY0FBY0MsR0FBR0M7SUFDNUI7SUFDQSxPQUFPLFNBQVVELENBQUMsRUFBRUMsQ0FBQztRQUNqQixJQUFJLE9BQU9BLE1BQU0sY0FBY0EsTUFBTSxNQUNqQyxNQUFNLElBQUlTLFVBQVUseUJBQXlCQyxPQUFPVixLQUFLO1FBQzdERixjQUFjQyxHQUFHQztRQUNqQixTQUFTVztZQUFPLElBQUksQ0FBQ0MsV0FBVyxHQUFHYjtRQUFHO1FBQ3RDQSxFQUFFTyxTQUFTLEdBQUdOLE1BQU0sT0FBT0MsT0FBT1ksTUFBTSxDQUFDYixLQUFNVyxDQUFBQSxHQUFHTCxTQUFTLEdBQUdOLEVBQUVNLFNBQVMsRUFBRSxJQUFJSyxJQUFHO0lBQ3RGO0FBQ0o7QUFDQSxJQUFJRyxjQUFjLFdBQVcsR0FBSSxTQUFVQyxNQUFNO0lBQzdDbEIsVUFBVWlCLGFBQWFDO0lBQ3ZCLFNBQVNELFlBQVlFLE9BQU87UUFDeEIsSUFBSUMsUUFBUUYsT0FBT1AsSUFBSSxDQUFDLElBQUksRUFBRVEsWUFBWSxJQUFJO1FBQzlDLGtEQUFrRDtRQUNsRCxJQUFJRSxRQUFRakIsT0FBT1ksTUFBTSxDQUFDQyxZQUFZUixTQUFTO1FBQy9DTCxPQUFPQyxjQUFjLENBQUNlLE9BQU9DO1FBQzdCakIsT0FBT2tCLGNBQWMsQ0FBQ0YsT0FBTyxRQUFRO1lBQ2pDRyxjQUFjO1lBQ2RDLFlBQVk7WUFDWkMsT0FBT1IsWUFBWVMsSUFBSTtRQUMzQjtRQUNBLE9BQU9OO0lBQ1g7SUFDQSxPQUFPSDtBQUNYLEVBQUVVO0FBQ3FCLENBQ3ZCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NlbHRyYS1hbW0tZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vRGVjb2RlRXJyb3IubWpzPzM0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBEZWNvZGVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVjb2RlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVjb2RlRXJyb3IobWVzc2FnZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICAvLyBmaXggdGhlIHByb3RvdHlwZSBjaGFpbiBpbiBhIGNyb3NzLXBsYXRmb3JtIHdheVxuICAgICAgICB2YXIgcHJvdG8gPSBPYmplY3QuY3JlYXRlKERlY29kZUVycm9yLnByb3RvdHlwZSk7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgcHJvdG8pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBEZWNvZGVFcnJvci5uYW1lLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gRGVjb2RlRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBEZWNvZGVFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGVjb2RlRXJyb3IubWpzLm1hcCJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJEZWNvZGVFcnJvciIsIl9zdXBlciIsIm1lc3NhZ2UiLCJfdGhpcyIsInByb3RvIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwidmFsdWUiLCJuYW1lIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/DecodeError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/Decoder.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/Decoder.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataViewIndexOutOfBoundsError: () => (/* binding */ DataViewIndexOutOfBoundsError),\n/* harmony export */   Decoder: () => (/* binding */ Decoder)\n/* harmony export */ });\n/* harmony import */ var _utils_prettyByte_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/prettyByte.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/prettyByte.mjs\");\n/* harmony import */ var _ExtensionCodec_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ExtensionCodec.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/ExtensionCodec.mjs\");\n/* harmony import */ var _utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/int.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/int.mjs\");\n/* harmony import */ var _utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/utf8.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/utf8.mjs\");\n/* harmony import */ var _utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/typedArrays.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/typedArrays.mjs\");\n/* harmony import */ var _CachedKeyDecoder_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CachedKeyDecoder.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/CachedKeyDecoder.mjs\");\n/* harmony import */ var _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DecodeError.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/DecodeError.mjs\");\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = undefined && undefined.__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar __asyncValues = undefined && undefined.__asyncValues || function(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n};\nvar __await = undefined && undefined.__await || function(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n};\nvar __asyncGenerator = undefined && undefined.__asyncGenerator || function(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n};\n\n\n\n\n\n\n\nvar STATE_ARRAY = \"array\";\nvar STATE_MAP_KEY = \"map_key\";\nvar STATE_MAP_VALUE = \"map_value\";\nfunction isValidMapKeyType(key, useMap, supportObjectNumberKeys) {\n    if (useMap) {\n        return typeof key === \"string\" || typeof key === \"number\" || typeof key === \"bigint\" || key instanceof Uint8Array || key instanceof _utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_0__.RawBinaryString;\n    }\n    // Plain objects support a more limited set of key types\n    return typeof key === \"string\" || supportObjectNumberKeys && typeof key === \"number\";\n}\nvar StackPool = /** @class */ function() {\n    function StackPool(useMap) {\n        this.useMap = useMap;\n        this.stack = [];\n        this.stackHeadPosition = -1;\n    }\n    Object.defineProperty(StackPool.prototype, \"length\", {\n        get: function() {\n            return this.stackHeadPosition + 1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StackPool.prototype.top = function() {\n        return this.stack[this.stackHeadPosition];\n    };\n    StackPool.prototype.pushArrayState = function(size) {\n        var state = this.getUninitializedStateFromPool();\n        state.type = STATE_ARRAY;\n        state.position = 0;\n        state.size = size;\n        state.array = new Array(size);\n    };\n    StackPool.prototype.pushMapState = function(size) {\n        var state = this.getUninitializedStateFromPool();\n        state.type = STATE_MAP_KEY;\n        state.readCount = 0;\n        state.size = size;\n        state.map = this.useMap ? new Map() : {};\n    };\n    StackPool.prototype.getUninitializedStateFromPool = function() {\n        this.stackHeadPosition++;\n        if (this.stackHeadPosition === this.stack.length) {\n            var partialState = {\n                type: undefined,\n                size: 0,\n                array: undefined,\n                position: 0,\n                readCount: 0,\n                map: undefined,\n                key: null\n            };\n            this.stack.push(partialState);\n        }\n        return this.stack[this.stackHeadPosition];\n    };\n    StackPool.prototype.release = function(state) {\n        var topStackState = this.stack[this.stackHeadPosition];\n        if (topStackState !== state) {\n            throw new Error(\"Invalid stack state. Released state is not on top of the stack.\");\n        }\n        if (state.type === STATE_ARRAY) {\n            var partialState = state;\n            partialState.size = 0;\n            partialState.array = undefined;\n            partialState.position = 0;\n            partialState.type = undefined;\n        }\n        if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {\n            var partialState = state;\n            partialState.size = 0;\n            partialState.map = undefined;\n            partialState.readCount = 0;\n            partialState.type = undefined;\n        }\n        this.stackHeadPosition--;\n    };\n    StackPool.prototype.reset = function() {\n        this.stack.length = 0;\n        this.stackHeadPosition = -1;\n    };\n    return StackPool;\n}();\nvar HEAD_BYTE_REQUIRED = -1;\nvar EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nvar EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\ntry {\n    // IE11: The spec says it should throw RangeError,\n    // IE11: but in IE11 it throws TypeError.\n    EMPTY_VIEW.getInt8(0);\n} catch (e) {\n    if (!(e instanceof RangeError)) {\n        throw new Error(\"This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access\");\n    }\n}\nvar DataViewIndexOutOfBoundsError = RangeError;\nvar MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\nvar sharedCachedKeyDecoder = new _CachedKeyDecoder_mjs__WEBPACK_IMPORTED_MODULE_1__.CachedKeyDecoder();\nvar Decoder = /** @class */ function() {\n    function Decoder(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        this.totalPos = 0;\n        this.pos = 0;\n        this.view = EMPTY_VIEW;\n        this.bytes = EMPTY_BYTES;\n        this.headByte = HEAD_BYTE_REQUIRED;\n        this.extensionCodec = (_a = options === null || options === void 0 ? void 0 : options.extensionCodec) !== null && _a !== void 0 ? _a : _ExtensionCodec_mjs__WEBPACK_IMPORTED_MODULE_2__.ExtensionCodec.defaultCodec;\n        this.context = options === null || options === void 0 ? void 0 : options.context; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\n        this.intMode = (_b = options === null || options === void 0 ? void 0 : options.intMode) !== null && _b !== void 0 ? _b : (options === null || options === void 0 ? void 0 : options.useBigInt64) ? _utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.IntMode.AS_ENCODED : _utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.IntMode.UNSAFE_NUMBER;\n        this.rawBinaryStringValues = (_c = options === null || options === void 0 ? void 0 : options.rawBinaryStringValues) !== null && _c !== void 0 ? _c : false;\n        this.rawBinaryStringKeys = (_d = options === null || options === void 0 ? void 0 : options.rawBinaryStringKeys) !== null && _d !== void 0 ? _d : false;\n        this.useRawBinaryStringClass = (_e = options === null || options === void 0 ? void 0 : options.useRawBinaryStringClass) !== null && _e !== void 0 ? _e : false;\n        this.useMap = (_f = options === null || options === void 0 ? void 0 : options.useMap) !== null && _f !== void 0 ? _f : false;\n        this.supportObjectNumberKeys = (_g = options === null || options === void 0 ? void 0 : options.supportObjectNumberKeys) !== null && _g !== void 0 ? _g : false;\n        this.maxStrLength = (_h = options === null || options === void 0 ? void 0 : options.maxStrLength) !== null && _h !== void 0 ? _h : _utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.UINT32_MAX;\n        this.maxBinLength = (_j = options === null || options === void 0 ? void 0 : options.maxBinLength) !== null && _j !== void 0 ? _j : _utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.UINT32_MAX;\n        this.maxArrayLength = (_k = options === null || options === void 0 ? void 0 : options.maxArrayLength) !== null && _k !== void 0 ? _k : _utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.UINT32_MAX;\n        this.maxMapLength = (_l = options === null || options === void 0 ? void 0 : options.maxMapLength) !== null && _l !== void 0 ? _l : _utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.UINT32_MAX;\n        this.maxExtLength = (_m = options === null || options === void 0 ? void 0 : options.maxExtLength) !== null && _m !== void 0 ? _m : _utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.UINT32_MAX;\n        this.keyDecoder = (options === null || options === void 0 ? void 0 : options.keyDecoder) !== undefined ? options.keyDecoder : sharedCachedKeyDecoder;\n        if (this.rawBinaryStringKeys && !this.useMap) {\n            throw new Error(\"rawBinaryStringKeys is only supported when useMap is true\");\n        }\n        this.stack = new StackPool(this.useMap);\n    }\n    Decoder.prototype.reinitializeState = function() {\n        this.totalPos = 0;\n        this.headByte = HEAD_BYTE_REQUIRED;\n        this.stack.reset();\n    // view, bytes, and pos will be re-initialized in setBuffer()\n    };\n    Decoder.prototype.setBuffer = function(buffer) {\n        this.bytes = (0,_utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_0__.ensureUint8Array)(buffer);\n        this.view = (0,_utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_0__.createDataView)(this.bytes);\n        this.pos = 0;\n    };\n    Decoder.prototype.appendBuffer = function(buffer) {\n        if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {\n            this.setBuffer(buffer);\n        } else {\n            var remainingData = this.bytes.subarray(this.pos);\n            var newData = (0,_utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_0__.ensureUint8Array)(buffer);\n            // concat remainingData + newData\n            var newBuffer = new Uint8Array(remainingData.length + newData.length);\n            newBuffer.set(remainingData);\n            newBuffer.set(newData, remainingData.length);\n            this.setBuffer(newBuffer);\n        }\n    };\n    Decoder.prototype.hasRemaining = function(size) {\n        return this.view.byteLength - this.pos >= size;\n    };\n    Decoder.prototype.createExtraByteError = function(posToShow) {\n        var _a = this, view = _a.view, pos = _a.pos;\n        return new RangeError(\"Extra \".concat(view.byteLength - pos, \" of \").concat(view.byteLength, \" byte(s) found at buffer[\").concat(posToShow, \"]\"));\n    };\n    /**\n     * @throws {@link DecodeError}\n     * @throws {@link RangeError}\n     */ Decoder.prototype.decode = function(buffer) {\n        this.reinitializeState();\n        this.setBuffer(buffer);\n        var object = this.doDecodeSync();\n        if (this.hasRemaining(1)) {\n            throw this.createExtraByteError(this.pos);\n        }\n        return object;\n    };\n    Decoder.prototype.decodeMulti = function(buffer) {\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    this.reinitializeState();\n                    this.setBuffer(buffer);\n                    _a.label = 1;\n                case 1:\n                    if (!this.hasRemaining(1)) return [\n                        3 /*break*/ ,\n                        3\n                    ];\n                    return [\n                        4 /*yield*/ ,\n                        this.doDecodeSync()\n                    ];\n                case 2:\n                    _a.sent();\n                    return [\n                        3 /*break*/ ,\n                        1\n                    ];\n                case 3:\n                    return [\n                        2 /*return*/ \n                    ];\n            }\n        });\n    };\n    Decoder.prototype.decodeAsync = function(stream) {\n        var _a, stream_1, stream_1_1;\n        var _b, e_1, _c, _d;\n        return __awaiter(this, void 0, void 0, function() {\n            var decoded, object, buffer, e_1_1, _e, headByte, pos, totalPos;\n            return __generator(this, function(_f) {\n                switch(_f.label){\n                    case 0:\n                        decoded = false;\n                        _f.label = 1;\n                    case 1:\n                        _f.trys.push([\n                            1,\n                            6,\n                            7,\n                            12\n                        ]);\n                        _a = true, stream_1 = __asyncValues(stream);\n                        _f.label = 2;\n                    case 2:\n                        return [\n                            4 /*yield*/ ,\n                            stream_1.next()\n                        ];\n                    case 3:\n                        if (!(stream_1_1 = _f.sent(), _b = stream_1_1.done, !_b)) return [\n                            3 /*break*/ ,\n                            5\n                        ];\n                        _d = stream_1_1.value;\n                        _a = false;\n                        buffer = _d;\n                        if (decoded) {\n                            throw this.createExtraByteError(this.totalPos);\n                        }\n                        this.appendBuffer(buffer);\n                        try {\n                            object = this.doDecodeSync();\n                            decoded = true;\n                        } catch (e) {\n                            if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n                                throw e; // rethrow\n                            }\n                        // fallthrough\n                        }\n                        this.totalPos += this.pos;\n                        _f.label = 4;\n                    case 4:\n                        _a = true;\n                        return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                    case 5:\n                        return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                    case 6:\n                        e_1_1 = _f.sent();\n                        e_1 = {\n                            error: e_1_1\n                        };\n                        return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                    case 7:\n                        _f.trys.push([\n                            7,\n                            ,\n                            10,\n                            11\n                        ]);\n                        if (!(!_a && !_b && (_c = stream_1.return))) return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            _c.call(stream_1)\n                        ];\n                    case 8:\n                        _f.sent();\n                        _f.label = 9;\n                    case 9:\n                        return [\n                            3 /*break*/ ,\n                            11\n                        ];\n                    case 10:\n                        if (e_1) throw e_1.error;\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 11:\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 12:\n                        if (decoded) {\n                            if (this.hasRemaining(1)) {\n                                throw this.createExtraByteError(this.totalPos);\n                            }\n                            return [\n                                2 /*return*/ ,\n                                object\n                            ];\n                        }\n                        _e = this, headByte = _e.headByte, pos = _e.pos, totalPos = _e.totalPos;\n                        throw new RangeError(\"Insufficient data in parsing \".concat((0,_utils_prettyByte_mjs__WEBPACK_IMPORTED_MODULE_4__.prettyByte)(headByte), \" at \").concat(totalPos, \" (\").concat(pos, \" in the current buffer)\"));\n                }\n            });\n        });\n    };\n    Decoder.prototype.decodeArrayStream = function(stream) {\n        return this.decodeMultiAsync(stream, true);\n    };\n    Decoder.prototype.decodeStream = function(stream) {\n        return this.decodeMultiAsync(stream, false);\n    };\n    Decoder.prototype.decodeMultiAsync = function(stream, isArray) {\n        return __asyncGenerator(this, arguments, function decodeMultiAsync_1() {\n            var isArrayHeaderRequired, arrayItemsLeft, _a, stream_2, stream_2_1, buffer, e_2, e_3_1;\n            var _b, e_3, _c, _d;\n            return __generator(this, function(_e) {\n                switch(_e.label){\n                    case 0:\n                        isArrayHeaderRequired = isArray;\n                        arrayItemsLeft = -1;\n                        _e.label = 1;\n                    case 1:\n                        _e.trys.push([\n                            1,\n                            13,\n                            14,\n                            19\n                        ]);\n                        _a = true, stream_2 = __asyncValues(stream);\n                        _e.label = 2;\n                    case 2:\n                        return [\n                            4 /*yield*/ ,\n                            __await(stream_2.next())\n                        ];\n                    case 3:\n                        if (!(stream_2_1 = _e.sent(), _b = stream_2_1.done, !_b)) return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                        _d = stream_2_1.value;\n                        _a = false;\n                        buffer = _d;\n                        if (isArray && arrayItemsLeft === 0) {\n                            throw this.createExtraByteError(this.totalPos);\n                        }\n                        this.appendBuffer(buffer);\n                        if (isArrayHeaderRequired) {\n                            arrayItemsLeft = this.readArraySize();\n                            isArrayHeaderRequired = false;\n                            this.complete();\n                        }\n                        _e.label = 4;\n                    case 4:\n                        _e.trys.push([\n                            4,\n                            9,\n                            ,\n                            10\n                        ]);\n                        _e.label = 5;\n                    case 5:\n                        if (false) {}\n                        return [\n                            4 /*yield*/ ,\n                            __await(this.doDecodeSync())\n                        ];\n                    case 6:\n                        return [\n                            4 /*yield*/ ,\n                            _e.sent()\n                        ];\n                    case 7:\n                        _e.sent();\n                        if (--arrayItemsLeft === 0) {\n                            return [\n                                3 /*break*/ ,\n                                8\n                            ];\n                        }\n                        return [\n                            3 /*break*/ ,\n                            5\n                        ];\n                    case 8:\n                        return [\n                            3 /*break*/ ,\n                            10\n                        ];\n                    case 9:\n                        e_2 = _e.sent();\n                        if (!(e_2 instanceof DataViewIndexOutOfBoundsError)) {\n                            throw e_2; // rethrow\n                        }\n                        return [\n                            3 /*break*/ ,\n                            10\n                        ];\n                    case 10:\n                        this.totalPos += this.pos;\n                        _e.label = 11;\n                    case 11:\n                        _a = true;\n                        return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                    case 12:\n                        return [\n                            3 /*break*/ ,\n                            19\n                        ];\n                    case 13:\n                        e_3_1 = _e.sent();\n                        e_3 = {\n                            error: e_3_1\n                        };\n                        return [\n                            3 /*break*/ ,\n                            19\n                        ];\n                    case 14:\n                        _e.trys.push([\n                            14,\n                            ,\n                            17,\n                            18\n                        ]);\n                        if (!(!_a && !_b && (_c = stream_2.return))) return [\n                            3 /*break*/ ,\n                            16\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            __await(_c.call(stream_2))\n                        ];\n                    case 15:\n                        _e.sent();\n                        _e.label = 16;\n                    case 16:\n                        return [\n                            3 /*break*/ ,\n                            18\n                        ];\n                    case 17:\n                        if (e_3) throw e_3.error;\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 18:\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 19:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    Decoder.prototype.doDecodeSync = function() {\n        DECODE: while(true){\n            var headByte = this.readHeadByte();\n            var object = void 0;\n            if (headByte >= 0xe0) {\n                // negative fixint (111x xxxx) 0xe0 - 0xff\n                object = this.convertNumber(headByte - 0x100);\n            } else if (headByte < 0xc0) {\n                if (headByte < 0x80) {\n                    // positive fixint (0xxx xxxx) 0x00 - 0x7f\n                    object = this.convertNumber(headByte);\n                } else if (headByte < 0x90) {\n                    // fixmap (1000 xxxx) 0x80 - 0x8f\n                    var size = headByte - 0x80;\n                    if (size !== 0) {\n                        this.pushMapState(size);\n                        this.complete();\n                        continue DECODE;\n                    } else {\n                        object = this.useMap ? new Map() : {};\n                    }\n                } else if (headByte < 0xa0) {\n                    // fixarray (1001 xxxx) 0x90 - 0x9f\n                    var size = headByte - 0x90;\n                    if (size !== 0) {\n                        this.pushArrayState(size);\n                        this.complete();\n                        continue DECODE;\n                    } else {\n                        object = [];\n                    }\n                } else {\n                    // fixstr (101x xxxx) 0xa0 - 0xbf\n                    var byteLength = headByte - 0xa0;\n                    object = this.decodeString(byteLength, 0);\n                }\n            } else if (headByte === 0xc0) {\n                // nil\n                object = null;\n            } else if (headByte === 0xc2) {\n                // false\n                object = false;\n            } else if (headByte === 0xc3) {\n                // true\n                object = true;\n            } else if (headByte === 0xca) {\n                // float 32\n                object = this.readF32();\n            } else if (headByte === 0xcb) {\n                // float 64\n                object = this.readF64();\n            } else if (headByte === 0xcc) {\n                // uint 8\n                object = this.convertNumber(this.readU8());\n            } else if (headByte === 0xcd) {\n                // uint 16\n                object = this.convertNumber(this.readU16());\n            } else if (headByte === 0xce) {\n                // uint 32\n                object = this.convertNumber(this.readU32());\n            } else if (headByte === 0xcf) {\n                // uint 64\n                object = this.readU64();\n            } else if (headByte === 0xd0) {\n                // int 8\n                object = this.convertNumber(this.readI8());\n            } else if (headByte === 0xd1) {\n                // int 16\n                object = this.convertNumber(this.readI16());\n            } else if (headByte === 0xd2) {\n                // int 32\n                object = this.convertNumber(this.readI32());\n            } else if (headByte === 0xd3) {\n                // int 64\n                object = this.readI64();\n            } else if (headByte === 0xd9) {\n                // str 8\n                var byteLength = this.lookU8();\n                object = this.decodeString(byteLength, 1);\n            } else if (headByte === 0xda) {\n                // str 16\n                var byteLength = this.lookU16();\n                object = this.decodeString(byteLength, 2);\n            } else if (headByte === 0xdb) {\n                // str 32\n                var byteLength = this.lookU32();\n                object = this.decodeString(byteLength, 4);\n            } else if (headByte === 0xdc) {\n                // array 16\n                var size = this.readU16();\n                if (size !== 0) {\n                    this.pushArrayState(size);\n                    this.complete();\n                    continue DECODE;\n                } else {\n                    object = [];\n                }\n            } else if (headByte === 0xdd) {\n                // array 32\n                var size = this.readU32();\n                if (size !== 0) {\n                    this.pushArrayState(size);\n                    this.complete();\n                    continue DECODE;\n                } else {\n                    object = [];\n                }\n            } else if (headByte === 0xde) {\n                // map 16\n                var size = this.readU16();\n                if (size !== 0) {\n                    this.pushMapState(size);\n                    this.complete();\n                    continue DECODE;\n                } else {\n                    object = {};\n                }\n            } else if (headByte === 0xdf) {\n                // map 32\n                var size = this.readU32();\n                if (size !== 0) {\n                    this.pushMapState(size);\n                    this.complete();\n                    continue DECODE;\n                } else {\n                    object = {};\n                }\n            } else if (headByte === 0xc4) {\n                // bin 8\n                var size = this.lookU8();\n                object = this.decodeBinary(size, 1);\n            } else if (headByte === 0xc5) {\n                // bin 16\n                var size = this.lookU16();\n                object = this.decodeBinary(size, 2);\n            } else if (headByte === 0xc6) {\n                // bin 32\n                var size = this.lookU32();\n                object = this.decodeBinary(size, 4);\n            } else if (headByte === 0xd4) {\n                // fixext 1\n                object = this.decodeExtension(1, 0);\n            } else if (headByte === 0xd5) {\n                // fixext 2\n                object = this.decodeExtension(2, 0);\n            } else if (headByte === 0xd6) {\n                // fixext 4\n                object = this.decodeExtension(4, 0);\n            } else if (headByte === 0xd7) {\n                // fixext 8\n                object = this.decodeExtension(8, 0);\n            } else if (headByte === 0xd8) {\n                // fixext 16\n                object = this.decodeExtension(16, 0);\n            } else if (headByte === 0xc7) {\n                // ext 8\n                var size = this.lookU8();\n                object = this.decodeExtension(size, 1);\n            } else if (headByte === 0xc8) {\n                // ext 16\n                var size = this.lookU16();\n                object = this.decodeExtension(size, 2);\n            } else if (headByte === 0xc9) {\n                // ext 32\n                var size = this.lookU32();\n                object = this.decodeExtension(size, 4);\n            } else {\n                throw new _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_5__.DecodeError(\"Unrecognized type byte: \".concat((0,_utils_prettyByte_mjs__WEBPACK_IMPORTED_MODULE_4__.prettyByte)(headByte)));\n            }\n            this.complete();\n            var stack = this.stack;\n            while(stack.length > 0){\n                // arrays and maps\n                var state = stack.top();\n                if (state.type === STATE_ARRAY) {\n                    state.array[state.position] = object;\n                    state.position++;\n                    if (state.position === state.size) {\n                        object = state.array;\n                        stack.release(state);\n                    } else {\n                        continue DECODE;\n                    }\n                } else if (state.type === STATE_MAP_KEY) {\n                    if (!isValidMapKeyType(object, this.useMap, this.supportObjectNumberKeys)) {\n                        var acceptableTypes = this.useMap ? \"string, number, bigint, or Uint8Array\" : this.supportObjectNumberKeys ? \"string or number\" : \"string\";\n                        throw new _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_5__.DecodeError(\"The type of key must be \".concat(acceptableTypes, \" but got \").concat(typeof object));\n                    }\n                    if (!this.useMap && object === \"__proto__\") {\n                        throw new _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_5__.DecodeError(\"The key __proto__ is not allowed\");\n                    }\n                    state.key = object;\n                    state.type = STATE_MAP_VALUE;\n                    continue DECODE;\n                } else {\n                    // it must be `state.type === State.MAP_VALUE` here\n                    if (this.useMap) {\n                        state.map.set(state.key, object);\n                    } else {\n                        state.map[state.key] = object;\n                    }\n                    state.readCount++;\n                    if (state.readCount === state.size) {\n                        object = state.map;\n                        stack.release(state);\n                    } else {\n                        state.key = null;\n                        state.type = STATE_MAP_KEY;\n                        continue DECODE;\n                    }\n                }\n            }\n            return object;\n        }\n    };\n    Decoder.prototype.readHeadByte = function() {\n        if (this.headByte === HEAD_BYTE_REQUIRED) {\n            this.headByte = this.readU8();\n        // console.log(\"headByte\", prettyByte(this.headByte));\n        }\n        return this.headByte;\n    };\n    Decoder.prototype.complete = function() {\n        this.headByte = HEAD_BYTE_REQUIRED;\n    };\n    Decoder.prototype.readArraySize = function() {\n        var headByte = this.readHeadByte();\n        switch(headByte){\n            case 0xdc:\n                return this.readU16();\n            case 0xdd:\n                return this.readU32();\n            default:\n                {\n                    if (headByte < 0xa0) {\n                        return headByte - 0x90;\n                    } else {\n                        throw new _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_5__.DecodeError(\"Unrecognized array type byte: \".concat((0,_utils_prettyByte_mjs__WEBPACK_IMPORTED_MODULE_4__.prettyByte)(headByte)));\n                    }\n                }\n        }\n    };\n    Decoder.prototype.pushMapState = function(size) {\n        if (size > this.maxMapLength) {\n            throw new _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_5__.DecodeError(\"Max length exceeded: map length (\".concat(size, \") > maxMapLengthLength (\").concat(this.maxMapLength, \")\"));\n        }\n        this.stack.pushMapState(size);\n    };\n    Decoder.prototype.pushArrayState = function(size) {\n        if (size > this.maxArrayLength) {\n            throw new _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_5__.DecodeError(\"Max length exceeded: array length (\".concat(size, \") > maxArrayLength (\").concat(this.maxArrayLength, \")\"));\n        }\n        this.stack.pushArrayState(size);\n    };\n    Decoder.prototype.decodeString = function(byteLength, headerOffset) {\n        if (this.stateIsMapKey() ? this.rawBinaryStringKeys : this.rawBinaryStringValues) {\n            var decoded = this.decodeBinary(byteLength, headerOffset);\n            if (this.useRawBinaryStringClass) {\n                return new _utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_0__.RawBinaryString(decoded);\n            }\n            return decoded;\n        }\n        return this.decodeUtf8String(byteLength, headerOffset);\n    };\n    Decoder.prototype.decodeUtf8String = function(byteLength, headerOffset) {\n        var _a;\n        if (byteLength > this.maxStrLength) {\n            throw new _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_5__.DecodeError(\"Max length exceeded: UTF-8 byte length (\".concat(byteLength, \") > maxStrLength (\").concat(this.maxStrLength, \")\"));\n        }\n        if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n            throw MORE_DATA;\n        }\n        var offset = this.pos + headerOffset;\n        var object;\n        if (this.stateIsMapKey() && ((_a = this.keyDecoder) === null || _a === void 0 ? void 0 : _a.canBeCached(byteLength))) {\n            object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n        } else {\n            object = (0,_utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_6__.utf8Decode)(this.bytes, offset, byteLength);\n        }\n        this.pos += headerOffset + byteLength;\n        return object;\n    };\n    Decoder.prototype.stateIsMapKey = function() {\n        if (this.stack.length > 0) {\n            var state = this.stack.top();\n            return state.type === STATE_MAP_KEY;\n        }\n        return false;\n    };\n    Decoder.prototype.decodeBinary = function(byteLength, headOffset) {\n        if (byteLength > this.maxBinLength) {\n            throw new _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_5__.DecodeError(\"Max length exceeded: bin length (\".concat(byteLength, \") > maxBinLength (\").concat(this.maxBinLength, \")\"));\n        }\n        if (!this.hasRemaining(byteLength + headOffset)) {\n            throw MORE_DATA;\n        }\n        var offset = this.pos + headOffset;\n        var object = this.bytes.subarray(offset, offset + byteLength);\n        this.pos += headOffset + byteLength;\n        return object;\n    };\n    Decoder.prototype.decodeExtension = function(size, headOffset) {\n        if (size > this.maxExtLength) {\n            throw new _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_5__.DecodeError(\"Max length exceeded: ext length (\".concat(size, \") > maxExtLength (\").concat(this.maxExtLength, \")\"));\n        }\n        var extType = this.view.getInt8(this.pos + headOffset);\n        var data = this.decodeBinary(size, headOffset + 1 /* extType */ );\n        return this.extensionCodec.decode(data, extType, this.context);\n    };\n    Decoder.prototype.convertNumber = function(value) {\n        return (0,_utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.convertSafeIntegerToMode)(value, this.intMode);\n    };\n    Decoder.prototype.lookU8 = function() {\n        return this.view.getUint8(this.pos);\n    };\n    Decoder.prototype.lookU16 = function() {\n        return this.view.getUint16(this.pos);\n    };\n    Decoder.prototype.lookU32 = function() {\n        return this.view.getUint32(this.pos);\n    };\n    Decoder.prototype.readU8 = function() {\n        var value = this.view.getUint8(this.pos);\n        this.pos++;\n        return value;\n    };\n    Decoder.prototype.readI8 = function() {\n        var value = this.view.getInt8(this.pos);\n        this.pos++;\n        return value;\n    };\n    Decoder.prototype.readU16 = function() {\n        var value = this.view.getUint16(this.pos);\n        this.pos += 2;\n        return value;\n    };\n    Decoder.prototype.readI16 = function() {\n        var value = this.view.getInt16(this.pos);\n        this.pos += 2;\n        return value;\n    };\n    Decoder.prototype.readU32 = function() {\n        var value = this.view.getUint32(this.pos);\n        this.pos += 4;\n        return value;\n    };\n    Decoder.prototype.readI32 = function() {\n        var value = this.view.getInt32(this.pos);\n        this.pos += 4;\n        return value;\n    };\n    Decoder.prototype.readU64 = function() {\n        var value = (0,_utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.getUint64)(this.view, this.pos, this.intMode);\n        this.pos += 8;\n        return value;\n    };\n    Decoder.prototype.readI64 = function() {\n        var value = (0,_utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.getInt64)(this.view, this.pos, this.intMode);\n        this.pos += 8;\n        return value;\n    };\n    Decoder.prototype.readF32 = function() {\n        var value = this.view.getFloat32(this.pos);\n        this.pos += 4;\n        return value;\n    };\n    Decoder.prototype.readF64 = function() {\n        var value = this.view.getFloat64(this.pos);\n        this.pos += 8;\n        return value;\n    };\n    return Decoder;\n}();\n //# sourceMappingURL=Decoder.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/Decoder.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/Encoder.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/Encoder.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_INITIAL_BUFFER_SIZE: () => (/* binding */ DEFAULT_INITIAL_BUFFER_SIZE),\n/* harmony export */   DEFAULT_MAX_DEPTH: () => (/* binding */ DEFAULT_MAX_DEPTH),\n/* harmony export */   Encoder: () => (/* binding */ Encoder)\n/* harmony export */ });\n/* harmony import */ var _utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/utf8.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/utf8.mjs\");\n/* harmony import */ var _ExtensionCodec_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ExtensionCodec.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/ExtensionCodec.mjs\");\n/* harmony import */ var _utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/int.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/int.mjs\");\n/* harmony import */ var _utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/typedArrays.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/typedArrays.mjs\");\n\n\n\n\nvar DEFAULT_MAX_DEPTH = 100;\nvar DEFAULT_INITIAL_BUFFER_SIZE = 2048;\nvar Encoder = /** @class */ function() {\n    function Encoder(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this.extensionCodec = (_a = options === null || options === void 0 ? void 0 : options.extensionCodec) !== null && _a !== void 0 ? _a : _ExtensionCodec_mjs__WEBPACK_IMPORTED_MODULE_0__.ExtensionCodec.defaultCodec;\n        this.context = options === null || options === void 0 ? void 0 : options.context; // needs a type assertion because EncoderOptions has no context property when ContextType is undefined\n        this.forceBigIntToInt64 = (_b = options === null || options === void 0 ? void 0 : options.forceBigIntToInt64) !== null && _b !== void 0 ? _b : false;\n        this.maxDepth = (_c = options === null || options === void 0 ? void 0 : options.maxDepth) !== null && _c !== void 0 ? _c : DEFAULT_MAX_DEPTH;\n        this.initialBufferSize = (_d = options === null || options === void 0 ? void 0 : options.initialBufferSize) !== null && _d !== void 0 ? _d : DEFAULT_INITIAL_BUFFER_SIZE;\n        this.sortKeys = (_e = options === null || options === void 0 ? void 0 : options.sortKeys) !== null && _e !== void 0 ? _e : false;\n        this.forceFloat32 = (_f = options === null || options === void 0 ? void 0 : options.forceFloat32) !== null && _f !== void 0 ? _f : false;\n        this.ignoreUndefined = (_g = options === null || options === void 0 ? void 0 : options.ignoreUndefined) !== null && _g !== void 0 ? _g : false;\n        this.forceIntegerToFloat = (_h = options === null || options === void 0 ? void 0 : options.forceIntegerToFloat) !== null && _h !== void 0 ? _h : false;\n        this.pos = 0;\n        this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n        this.bytes = new Uint8Array(this.view.buffer);\n    }\n    Encoder.prototype.reinitializeState = function() {\n        this.pos = 0;\n    };\n    /**\n     * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n     *\n     * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n     */ Encoder.prototype.encodeSharedRef = function(object) {\n        this.reinitializeState();\n        this.doEncode(object, 1);\n        return this.bytes.subarray(0, this.pos);\n    };\n    /**\n     * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n     */ Encoder.prototype.encode = function(object) {\n        this.reinitializeState();\n        this.doEncode(object, 1);\n        return this.bytes.slice(0, this.pos);\n    };\n    Encoder.prototype.doEncode = function(object, depth) {\n        if (depth > this.maxDepth) {\n            throw new Error(\"Too deep objects in depth \".concat(depth));\n        }\n        if (object == null) {\n            this.encodeNil();\n        } else if (typeof object === \"boolean\") {\n            this.encodeBoolean(object);\n        } else if (typeof object === \"number\") {\n            this.encodeNumber(object);\n        } else if (typeof object === \"string\") {\n            this.encodeString(object);\n        } else {\n            this.encodeObject(object, depth);\n        }\n    };\n    Encoder.prototype.ensureBufferSizeToWrite = function(sizeToWrite) {\n        var requiredSize = this.pos + sizeToWrite;\n        if (this.view.byteLength < requiredSize) {\n            this.resizeBuffer(requiredSize * 2);\n        }\n    };\n    Encoder.prototype.resizeBuffer = function(newSize) {\n        var newBuffer = new ArrayBuffer(newSize);\n        var newBytes = new Uint8Array(newBuffer);\n        var newView = new DataView(newBuffer);\n        newBytes.set(this.bytes);\n        this.view = newView;\n        this.bytes = newBytes;\n    };\n    Encoder.prototype.encodeNil = function() {\n        this.writeU8(0xc0);\n    };\n    Encoder.prototype.encodeBoolean = function(object) {\n        if (object === false) {\n            this.writeU8(0xc2);\n        } else {\n            this.writeU8(0xc3);\n        }\n    };\n    Encoder.prototype.encodeNumber = function(object) {\n        if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {\n            if (object >= 0) {\n                if (object < 0x80) {\n                    // positive fixint\n                    this.writeU8(object);\n                } else if (object < 0x100) {\n                    // uint 8\n                    this.writeU8(0xcc);\n                    this.writeU8(object);\n                } else if (object < 0x10000) {\n                    // uint 16\n                    this.writeU8(0xcd);\n                    this.writeU16(object);\n                } else if (object < 0x100000000) {\n                    // uint 32\n                    this.writeU8(0xce);\n                    this.writeU32(object);\n                } else {\n                    // uint 64\n                    this.writeU8(0xcf);\n                    this.writeU64(object);\n                }\n            } else {\n                if (object >= -0x20) {\n                    // negative fixint\n                    this.writeU8(0xe0 | object + 0x20);\n                } else if (object >= -0x80) {\n                    // int 8\n                    this.writeU8(0xd0);\n                    this.writeI8(object);\n                } else if (object >= -0x8000) {\n                    // int 16\n                    this.writeU8(0xd1);\n                    this.writeI16(object);\n                } else if (object >= -0x80000000) {\n                    // int 32\n                    this.writeU8(0xd2);\n                    this.writeI32(object);\n                } else {\n                    // int 64\n                    this.writeU8(0xd3);\n                    this.writeI64(object);\n                }\n            }\n        } else {\n            this.encodeNumberAsFloat(object);\n        }\n    };\n    Encoder.prototype.encodeNumberAsFloat = function(object) {\n        if (this.forceFloat32) {\n            // float 32\n            this.writeU8(0xca);\n            this.writeF32(object);\n        } else {\n            // float 64\n            this.writeU8(0xcb);\n            this.writeF64(object);\n        }\n    };\n    Encoder.prototype.encodeBigInt = function(object) {\n        if (this.forceBigIntToInt64) {\n            this.encodeBigIntAsInt64(object);\n        } else if (object >= 0) {\n            if (object < 0x100000000 || this.forceIntegerToFloat) {\n                // uint 32 or lower, or force to float\n                this.encodeNumber(Number(object));\n            } else if (object < BigInt(\"0x10000000000000000\")) {\n                // uint 64\n                this.encodeBigIntAsInt64(object);\n            } else {\n                throw new Error(\"Bigint is too large for uint64: \".concat(object));\n            }\n        } else {\n            if (object >= -0x80000000 || this.forceIntegerToFloat) {\n                // int 32 or lower, or force to float\n                this.encodeNumber(Number(object));\n            } else if (object >= BigInt(-1) * BigInt(\"0x8000000000000000\")) {\n                // int 64\n                this.encodeBigIntAsInt64(object);\n            } else {\n                throw new Error(\"Bigint is too small for int64: \".concat(object));\n            }\n        }\n    };\n    Encoder.prototype.encodeBigIntAsInt64 = function(object) {\n        if (object >= BigInt(0)) {\n            // uint 64\n            this.writeU8(0xcf);\n            this.writeBigUint64(object);\n        } else {\n            // int 64\n            this.writeU8(0xd3);\n            this.writeBigInt64(object);\n        }\n    };\n    Encoder.prototype.writeStringHeader = function(byteLength) {\n        if (byteLength < 32) {\n            // fixstr\n            this.writeU8(0xa0 + byteLength);\n        } else if (byteLength < 0x100) {\n            // str 8\n            this.writeU8(0xd9);\n            this.writeU8(byteLength);\n        } else if (byteLength < 0x10000) {\n            // str 16\n            this.writeU8(0xda);\n            this.writeU16(byteLength);\n        } else if (byteLength < 0x100000000) {\n            // str 32\n            this.writeU8(0xdb);\n            this.writeU32(byteLength);\n        } else {\n            throw new Error(\"Too long string: \".concat(byteLength, \" bytes in UTF-8\"));\n        }\n    };\n    Encoder.prototype.encodeString = function(object) {\n        var maxHeaderSize = 1 + 4;\n        var byteLength = (0,_utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_1__.utf8Count)(object);\n        this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n        this.writeStringHeader(byteLength);\n        (0,_utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_1__.utf8Encode)(object, this.bytes, this.pos);\n        this.pos += byteLength;\n    };\n    Encoder.prototype.encodeObject = function(object, depth) {\n        // try to encode objects with custom codec first of non-primitives\n        var ext = this.extensionCodec.tryToEncode(object, this.context);\n        if (ext != null) {\n            this.encodeExtension(ext);\n        } else if (Array.isArray(object)) {\n            this.encodeArray(object, depth);\n        } else if (ArrayBuffer.isView(object)) {\n            this.encodeBinary(object);\n        } else if (object instanceof _utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__.RawBinaryString) {\n            this.encodeBinaryAsString(object);\n        } else if (typeof object === \"bigint\") {\n            // this is here instead of in doEncode so that we can try encoding with an extension first,\n            // otherwise we would break existing extensions for bigints\n            this.encodeBigInt(object);\n        } else if (object instanceof Map) {\n            this.encodeMap(object, depth);\n        } else if (typeof object === \"object\") {\n            this.encodeMapObject(object, depth);\n        } else {\n            // symbol, function and other special object come here unless extensionCodec handles them.\n            throw new Error(\"Unrecognized object: \".concat(Object.prototype.toString.apply(object)));\n        }\n    };\n    Encoder.prototype.encodeBinary = function(object) {\n        var size = object.byteLength;\n        if (size < 0x100) {\n            // bin 8\n            this.writeU8(0xc4);\n            this.writeU8(size);\n        } else if (size < 0x10000) {\n            // bin 16\n            this.writeU8(0xc5);\n            this.writeU16(size);\n        } else if (size < 0x100000000) {\n            // bin 32\n            this.writeU8(0xc6);\n            this.writeU32(size);\n        } else {\n            throw new Error(\"Too large binary: \".concat(size));\n        }\n        var bytes = (0,_utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__.ensureUint8Array)(object);\n        this.writeU8a(bytes);\n    };\n    Encoder.prototype.encodeBinaryAsString = function(binaryString) {\n        var object = binaryString.rawBinaryValue;\n        this.writeStringHeader(object.byteLength);\n        var bytes = (0,_utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__.ensureUint8Array)(object);\n        this.writeU8a(bytes);\n    };\n    Encoder.prototype.encodeArray = function(object, depth) {\n        var size = object.length;\n        if (size < 16) {\n            // fixarray\n            this.writeU8(0x90 + size);\n        } else if (size < 0x10000) {\n            // array 16\n            this.writeU8(0xdc);\n            this.writeU16(size);\n        } else if (size < 0x100000000) {\n            // array 32\n            this.writeU8(0xdd);\n            this.writeU32(size);\n        } else {\n            throw new Error(\"Too large array: \".concat(size));\n        }\n        for(var _i = 0, object_1 = object; _i < object_1.length; _i++){\n            var item = object_1[_i];\n            this.doEncode(item, depth + 1);\n        }\n    };\n    Encoder.prototype.countWithoutUndefined = function(map, keys) {\n        var count = 0;\n        for(var _i = 0, keys_1 = keys; _i < keys_1.length; _i++){\n            var key = keys_1[_i];\n            if (map.get(key) !== undefined) {\n                count++;\n            }\n        }\n        return count;\n    };\n    Encoder.prototype.sortMapKeys = function(keys) {\n        var numericKeys = [];\n        var stringKeys = [];\n        var rawStringKeys = [];\n        var binaryKeys = [];\n        for(var _i = 0, keys_2 = keys; _i < keys_2.length; _i++){\n            var key = keys_2[_i];\n            if (typeof key === \"number\") {\n                if (isNaN(key)) {\n                    throw new Error(\"Cannot sort map keys with NaN value\");\n                }\n                numericKeys.push(key);\n            } else if (typeof key === \"bigint\") {\n                numericKeys.push(key);\n            } else if (typeof key === \"string\") {\n                stringKeys.push(key);\n            } else if (ArrayBuffer.isView(key)) {\n                binaryKeys.push((0,_utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__.ensureUint8Array)(key));\n            } else if (key instanceof _utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__.RawBinaryString) {\n                rawStringKeys.push(key);\n            } else {\n                throw new Error(\"Unsupported map key type: \".concat(Object.prototype.toString.apply(key)));\n            }\n        }\n        numericKeys.sort(function(a, b) {\n            return a < b ? -1 : a > b ? 1 : 0;\n        }); // Avoid using === to compare numbers and bigints\n        stringKeys.sort();\n        rawStringKeys.sort(function(a, b) {\n            return (0,_utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__.compareUint8Arrays)((0,_utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__.ensureUint8Array)(a.rawBinaryValue), (0,_utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__.ensureUint8Array)(b.rawBinaryValue));\n        });\n        binaryKeys.sort(_utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__.compareUint8Arrays);\n        // At the moment this arbitrarily orders the keys as numeric, string, raw string, binary\n        return [].concat(numericKeys, stringKeys, rawStringKeys, binaryKeys);\n    };\n    Encoder.prototype.encodeMapObject = function(object, depth) {\n        this.encodeMap(new Map(Object.entries(object)), depth);\n    };\n    Encoder.prototype.encodeMap = function(map, depth) {\n        var keys = Array.from(map.keys());\n        if (this.sortKeys) {\n            keys = this.sortMapKeys(keys);\n        }\n        // Map keys may encode to the same underlying value. For example, the number 3 and the bigint 3.\n        // This is also possible with ArrayBufferViews. We may want to introduce a new encoding option\n        // which checks for duplicate keys in this sense and throws an error if they are found.\n        var size = this.ignoreUndefined ? this.countWithoutUndefined(map, keys) : keys.length;\n        if (size < 16) {\n            // fixmap\n            this.writeU8(0x80 + size);\n        } else if (size < 0x10000) {\n            // map 16\n            this.writeU8(0xde);\n            this.writeU16(size);\n        } else if (size < 0x100000000) {\n            // map 32\n            this.writeU8(0xdf);\n            this.writeU32(size);\n        } else {\n            throw new Error(\"Too large map object: \".concat(size));\n        }\n        for(var _i = 0, keys_3 = keys; _i < keys_3.length; _i++){\n            var key = keys_3[_i];\n            var value = map.get(key);\n            if (!(this.ignoreUndefined && value === undefined)) {\n                if (typeof key === \"string\") {\n                    this.encodeString(key);\n                } else if (typeof key === \"number\") {\n                    this.encodeNumber(key);\n                } else if (typeof key === \"bigint\") {\n                    this.encodeBigInt(key);\n                } else if (ArrayBuffer.isView(key)) {\n                    this.encodeBinary(key);\n                } else if (key instanceof _utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__.RawBinaryString) {\n                    this.encodeBinaryAsString(key);\n                } else {\n                    throw new Error(\"Unsupported map key type: \".concat(Object.prototype.toString.apply(key)));\n                }\n                this.doEncode(value, depth + 1);\n            }\n        }\n    };\n    Encoder.prototype.encodeExtension = function(ext) {\n        var size = ext.data.length;\n        if (size === 1) {\n            // fixext 1\n            this.writeU8(0xd4);\n        } else if (size === 2) {\n            // fixext 2\n            this.writeU8(0xd5);\n        } else if (size === 4) {\n            // fixext 4\n            this.writeU8(0xd6);\n        } else if (size === 8) {\n            // fixext 8\n            this.writeU8(0xd7);\n        } else if (size === 16) {\n            // fixext 16\n            this.writeU8(0xd8);\n        } else if (size < 0x100) {\n            // ext 8\n            this.writeU8(0xc7);\n            this.writeU8(size);\n        } else if (size < 0x10000) {\n            // ext 16\n            this.writeU8(0xc8);\n            this.writeU16(size);\n        } else if (size < 0x100000000) {\n            // ext 32\n            this.writeU8(0xc9);\n            this.writeU32(size);\n        } else {\n            throw new Error(\"Too large extension object: \".concat(size));\n        }\n        this.writeI8(ext.type);\n        this.writeU8a(ext.data);\n    };\n    Encoder.prototype.writeU8 = function(value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setUint8(this.pos, value);\n        this.pos++;\n    };\n    Encoder.prototype.writeU8a = function(values) {\n        var size = values.length;\n        this.ensureBufferSizeToWrite(size);\n        this.bytes.set(values, this.pos);\n        this.pos += size;\n    };\n    Encoder.prototype.writeI8 = function(value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setInt8(this.pos, value);\n        this.pos++;\n    };\n    Encoder.prototype.writeU16 = function(value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setUint16(this.pos, value);\n        this.pos += 2;\n    };\n    Encoder.prototype.writeI16 = function(value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setInt16(this.pos, value);\n        this.pos += 2;\n    };\n    Encoder.prototype.writeU32 = function(value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setUint32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeI32 = function(value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setInt32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeF32 = function(value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setFloat32(this.pos, value);\n        this.pos += 4;\n    };\n    Encoder.prototype.writeF64 = function(value) {\n        this.ensureBufferSizeToWrite(8);\n        this.view.setFloat64(this.pos, value);\n        this.pos += 8;\n    };\n    Encoder.prototype.writeU64 = function(value) {\n        this.ensureBufferSizeToWrite(8);\n        (0,_utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.setUint64)(this.view, this.pos, value);\n        this.pos += 8;\n    };\n    Encoder.prototype.writeI64 = function(value) {\n        this.ensureBufferSizeToWrite(8);\n        (0,_utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.setInt64)(this.view, this.pos, value);\n        this.pos += 8;\n    };\n    Encoder.prototype.writeBigUint64 = function(value) {\n        this.ensureBufferSizeToWrite(8);\n        this.view.setBigUint64(this.pos, value);\n        this.pos += 8;\n    };\n    Encoder.prototype.writeBigInt64 = function(value) {\n        this.ensureBufferSizeToWrite(8);\n        this.view.setBigInt64(this.pos, value);\n        this.pos += 8;\n    };\n    return Encoder;\n}();\n //# sourceMappingURL=Encoder.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/Encoder.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/ExtData.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/ExtData.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtData: () => (/* binding */ ExtData)\n/* harmony export */ });\n/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */ var ExtData = /** @class */ function() {\n    function ExtData(type, data) {\n        this.type = type;\n        this.data = data;\n    }\n    return ExtData;\n}();\n //# sourceMappingURL=ExtData.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vRXh0RGF0YS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ0QsSUFBSUEsVUFBVSxXQUFXLEdBQUk7SUFDekIsU0FBU0EsUUFBUUMsSUFBSSxFQUFFQyxJQUFJO1FBQ3ZCLElBQUksQ0FBQ0QsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtJQUNoQjtJQUNBLE9BQU9GO0FBQ1g7QUFDbUIsQ0FDbkIsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VsdHJhLWFtbS1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvcmFuZC1tc2dwYWNrL2Rpc3QuZXM1K2VzbS9FeHREYXRhLm1qcz8xMDU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0RGF0YSBpcyB1c2VkIHRvIGhhbmRsZSBFeHRlbnNpb24gVHlwZXMgdGhhdCBhcmUgbm90IHJlZ2lzdGVyZWQgdG8gRXh0ZW5zaW9uQ29kZWMuXG4gKi9cbnZhciBFeHREYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV4dERhdGEodHlwZSwgZGF0YSkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gRXh0RGF0YTtcbn0oKSk7XG5leHBvcnQgeyBFeHREYXRhIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FeHREYXRhLm1qcy5tYXAiXSwibmFtZXMiOlsiRXh0RGF0YSIsInR5cGUiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/ExtData.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/ExtensionCodec.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/ExtensionCodec.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtensionCodec: () => (/* binding */ ExtensionCodec)\n/* harmony export */ });\n/* harmony import */ var _ExtData_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ExtData.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/ExtData.mjs\");\n/* harmony import */ var _timestamp_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./timestamp.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/timestamp.mjs\");\n// ExtensionCodec to handle MessagePack extensions\n\n\nvar ExtensionCodec = /** @class */ function() {\n    function ExtensionCodec() {\n        // built-in extensions\n        this.builtInEncoders = [];\n        this.builtInDecoders = [];\n        // custom extensions\n        this.encoders = [];\n        this.decoders = [];\n        this.register(_timestamp_mjs__WEBPACK_IMPORTED_MODULE_0__.timestampExtension);\n    }\n    ExtensionCodec.prototype.register = function(_a) {\n        var type = _a.type, encode = _a.encode, decode = _a.decode;\n        if (type >= 0) {\n            // custom extensions\n            this.encoders[type] = encode;\n            this.decoders[type] = decode;\n        } else {\n            // built-in extensions\n            var index = 1 + type;\n            this.builtInEncoders[index] = encode;\n            this.builtInDecoders[index] = decode;\n        }\n    };\n    ExtensionCodec.prototype.tryToEncode = function(object, context) {\n        // built-in extensions\n        for(var i = 0; i < this.builtInEncoders.length; i++){\n            var encodeExt = this.builtInEncoders[i];\n            if (encodeExt != null) {\n                var data = encodeExt(object, context);\n                if (data != null) {\n                    var type = -1 - i;\n                    return new _ExtData_mjs__WEBPACK_IMPORTED_MODULE_1__.ExtData(type, data);\n                }\n            }\n        }\n        // custom extensions\n        for(var i = 0; i < this.encoders.length; i++){\n            var encodeExt = this.encoders[i];\n            if (encodeExt != null) {\n                var data = encodeExt(object, context);\n                if (data != null) {\n                    var type = i;\n                    return new _ExtData_mjs__WEBPACK_IMPORTED_MODULE_1__.ExtData(type, data);\n                }\n            }\n        }\n        if (object instanceof _ExtData_mjs__WEBPACK_IMPORTED_MODULE_1__.ExtData) {\n            // to keep ExtData as is\n            return object;\n        }\n        return null;\n    };\n    ExtensionCodec.prototype.decode = function(data, type, context) {\n        var decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n        if (decodeExt) {\n            return decodeExt(data, type, context);\n        } else {\n            // decode() does not fail, returns ExtData instead.\n            return new _ExtData_mjs__WEBPACK_IMPORTED_MODULE_1__.ExtData(type, data);\n        }\n    };\n    ExtensionCodec.defaultCodec = new ExtensionCodec();\n    return ExtensionCodec;\n}();\n //# sourceMappingURL=ExtensionCodec.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vRXh0ZW5zaW9uQ29kZWMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUFrRDtBQUNWO0FBQ2E7QUFDckQsSUFBSUUsaUJBQWlCLFdBQVcsR0FBSTtJQUNoQyxTQUFTQTtRQUNMLHNCQUFzQjtRQUN0QixJQUFJLENBQUNDLGVBQWUsR0FBRyxFQUFFO1FBQ3pCLElBQUksQ0FBQ0MsZUFBZSxHQUFHLEVBQUU7UUFDekIsb0JBQW9CO1FBQ3BCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLEVBQUU7UUFDbEIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsRUFBRTtRQUNsQixJQUFJLENBQUNDLFFBQVEsQ0FBQ04sOERBQWtCQTtJQUNwQztJQUNBQyxlQUFlTSxTQUFTLENBQUNELFFBQVEsR0FBRyxTQUFVRSxFQUFFO1FBQzVDLElBQUlDLE9BQU9ELEdBQUdDLElBQUksRUFBRUMsU0FBU0YsR0FBR0UsTUFBTSxFQUFFQyxTQUFTSCxHQUFHRyxNQUFNO1FBQzFELElBQUlGLFFBQVEsR0FBRztZQUNYLG9CQUFvQjtZQUNwQixJQUFJLENBQUNMLFFBQVEsQ0FBQ0ssS0FBSyxHQUFHQztZQUN0QixJQUFJLENBQUNMLFFBQVEsQ0FBQ0ksS0FBSyxHQUFHRTtRQUMxQixPQUNLO1lBQ0Qsc0JBQXNCO1lBQ3RCLElBQUlDLFFBQVEsSUFBSUg7WUFDaEIsSUFBSSxDQUFDUCxlQUFlLENBQUNVLE1BQU0sR0FBR0Y7WUFDOUIsSUFBSSxDQUFDUCxlQUFlLENBQUNTLE1BQU0sR0FBR0Q7UUFDbEM7SUFDSjtJQUNBVixlQUFlTSxTQUFTLENBQUNNLFdBQVcsR0FBRyxTQUFVQyxNQUFNLEVBQUVDLE9BQU87UUFDNUQsc0JBQXNCO1FBQ3RCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLElBQUksQ0FBQ2QsZUFBZSxDQUFDZSxNQUFNLEVBQUVELElBQUs7WUFDbEQsSUFBSUUsWUFBWSxJQUFJLENBQUNoQixlQUFlLENBQUNjLEVBQUU7WUFDdkMsSUFBSUUsYUFBYSxNQUFNO2dCQUNuQixJQUFJQyxPQUFPRCxVQUFVSixRQUFRQztnQkFDN0IsSUFBSUksUUFBUSxNQUFNO29CQUNkLElBQUlWLE9BQU8sQ0FBQyxJQUFJTztvQkFDaEIsT0FBTyxJQUFJakIsaURBQU9BLENBQUNVLE1BQU1VO2dCQUM3QjtZQUNKO1FBQ0o7UUFDQSxvQkFBb0I7UUFDcEIsSUFBSyxJQUFJSCxJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDWixRQUFRLENBQUNhLE1BQU0sRUFBRUQsSUFBSztZQUMzQyxJQUFJRSxZQUFZLElBQUksQ0FBQ2QsUUFBUSxDQUFDWSxFQUFFO1lBQ2hDLElBQUlFLGFBQWEsTUFBTTtnQkFDbkIsSUFBSUMsT0FBT0QsVUFBVUosUUFBUUM7Z0JBQzdCLElBQUlJLFFBQVEsTUFBTTtvQkFDZCxJQUFJVixPQUFPTztvQkFDWCxPQUFPLElBQUlqQixpREFBT0EsQ0FBQ1UsTUFBTVU7Z0JBQzdCO1lBQ0o7UUFDSjtRQUNBLElBQUlMLGtCQUFrQmYsaURBQU9BLEVBQUU7WUFDM0Isd0JBQXdCO1lBQ3hCLE9BQU9lO1FBQ1g7UUFDQSxPQUFPO0lBQ1g7SUFDQWIsZUFBZU0sU0FBUyxDQUFDSSxNQUFNLEdBQUcsU0FBVVEsSUFBSSxFQUFFVixJQUFJLEVBQUVNLE9BQU87UUFDM0QsSUFBSUssWUFBWVgsT0FBTyxJQUFJLElBQUksQ0FBQ04sZUFBZSxDQUFDLENBQUMsSUFBSU0sS0FBSyxHQUFHLElBQUksQ0FBQ0osUUFBUSxDQUFDSSxLQUFLO1FBQ2hGLElBQUlXLFdBQVc7WUFDWCxPQUFPQSxVQUFVRCxNQUFNVixNQUFNTTtRQUNqQyxPQUNLO1lBQ0QsbURBQW1EO1lBQ25ELE9BQU8sSUFBSWhCLGlEQUFPQSxDQUFDVSxNQUFNVTtRQUM3QjtJQUNKO0lBQ0FsQixlQUFlb0IsWUFBWSxHQUFHLElBQUlwQjtJQUNsQyxPQUFPQTtBQUNYO0FBQzBCLENBQzFCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NlbHRyYS1hbW0tZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vRXh0ZW5zaW9uQ29kZWMubWpzPzIxMWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRXh0ZW5zaW9uQ29kZWMgdG8gaGFuZGxlIE1lc3NhZ2VQYWNrIGV4dGVuc2lvbnNcbmltcG9ydCB7IEV4dERhdGEgfSBmcm9tIFwiLi9FeHREYXRhLm1qc1wiO1xuaW1wb3J0IHsgdGltZXN0YW1wRXh0ZW5zaW9uIH0gZnJvbSBcIi4vdGltZXN0YW1wLm1qc1wiO1xudmFyIEV4dGVuc2lvbkNvZGVjID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEV4dGVuc2lvbkNvZGVjKCkge1xuICAgICAgICAvLyBidWlsdC1pbiBleHRlbnNpb25zXG4gICAgICAgIHRoaXMuYnVpbHRJbkVuY29kZXJzID0gW107XG4gICAgICAgIHRoaXMuYnVpbHRJbkRlY29kZXJzID0gW107XG4gICAgICAgIC8vIGN1c3RvbSBleHRlbnNpb25zXG4gICAgICAgIHRoaXMuZW5jb2RlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5kZWNvZGVycyA9IFtdO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRpbWVzdGFtcEV4dGVuc2lvbik7XG4gICAgfVxuICAgIEV4dGVuc2lvbkNvZGVjLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgdHlwZSA9IF9hLnR5cGUsIGVuY29kZSA9IF9hLmVuY29kZSwgZGVjb2RlID0gX2EuZGVjb2RlO1xuICAgICAgICBpZiAodHlwZSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBjdXN0b20gZXh0ZW5zaW9uc1xuICAgICAgICAgICAgdGhpcy5lbmNvZGVyc1t0eXBlXSA9IGVuY29kZTtcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlcnNbdHlwZV0gPSBkZWNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBidWlsdC1pbiBleHRlbnNpb25zXG4gICAgICAgICAgICB2YXIgaW5kZXggPSAxICsgdHlwZTtcbiAgICAgICAgICAgIHRoaXMuYnVpbHRJbkVuY29kZXJzW2luZGV4XSA9IGVuY29kZTtcbiAgICAgICAgICAgIHRoaXMuYnVpbHRJbkRlY29kZXJzW2luZGV4XSA9IGRlY29kZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRXh0ZW5zaW9uQ29kZWMucHJvdG90eXBlLnRyeVRvRW5jb2RlID0gZnVuY3Rpb24gKG9iamVjdCwgY29udGV4dCkge1xuICAgICAgICAvLyBidWlsdC1pbiBleHRlbnNpb25zXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5idWlsdEluRW5jb2RlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBlbmNvZGVFeHQgPSB0aGlzLmJ1aWx0SW5FbmNvZGVyc1tpXTtcbiAgICAgICAgICAgIGlmIChlbmNvZGVFeHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gZW5jb2RlRXh0KG9iamVjdCwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IC0xIC0gaTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFeHREYXRhKHR5cGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBjdXN0b20gZXh0ZW5zaW9uc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZW5jb2RlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBlbmNvZGVFeHQgPSB0aGlzLmVuY29kZXJzW2ldO1xuICAgICAgICAgICAgaWYgKGVuY29kZUV4dCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBlbmNvZGVFeHQob2JqZWN0LCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gaTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFeHREYXRhKHR5cGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgRXh0RGF0YSkge1xuICAgICAgICAgICAgLy8gdG8ga2VlcCBFeHREYXRhIGFzIGlzXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgRXh0ZW5zaW9uQ29kZWMucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBkZWNvZGVFeHQgPSB0eXBlIDwgMCA/IHRoaXMuYnVpbHRJbkRlY29kZXJzWy0xIC0gdHlwZV0gOiB0aGlzLmRlY29kZXJzW3R5cGVdO1xuICAgICAgICBpZiAoZGVjb2RlRXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlRXh0KGRhdGEsIHR5cGUsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZGVjb2RlKCkgZG9lcyBub3QgZmFpbCwgcmV0dXJucyBFeHREYXRhIGluc3RlYWQuXG4gICAgICAgICAgICByZXR1cm4gbmV3IEV4dERhdGEodHlwZSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV4dGVuc2lvbkNvZGVjLmRlZmF1bHRDb2RlYyA9IG5ldyBFeHRlbnNpb25Db2RlYygpO1xuICAgIHJldHVybiBFeHRlbnNpb25Db2RlYztcbn0oKSk7XG5leHBvcnQgeyBFeHRlbnNpb25Db2RlYyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXh0ZW5zaW9uQ29kZWMubWpzLm1hcCJdLCJuYW1lcyI6WyJFeHREYXRhIiwidGltZXN0YW1wRXh0ZW5zaW9uIiwiRXh0ZW5zaW9uQ29kZWMiLCJidWlsdEluRW5jb2RlcnMiLCJidWlsdEluRGVjb2RlcnMiLCJlbmNvZGVycyIsImRlY29kZXJzIiwicmVnaXN0ZXIiLCJwcm90b3R5cGUiLCJfYSIsInR5cGUiLCJlbmNvZGUiLCJkZWNvZGUiLCJpbmRleCIsInRyeVRvRW5jb2RlIiwib2JqZWN0IiwiY29udGV4dCIsImkiLCJsZW5ndGgiLCJlbmNvZGVFeHQiLCJkYXRhIiwiZGVjb2RlRXh0IiwiZGVmYXVsdENvZGVjIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/ExtensionCodec.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/decode.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/decode.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   decodeMulti: () => (/* binding */ decodeMulti),\n/* harmony export */   defaultDecodeOptions: () => (/* binding */ defaultDecodeOptions)\n/* harmony export */ });\n/* harmony import */ var _Decoder_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Decoder.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/Decoder.mjs\");\n\n/**\n * @deprecated No longer supported.\n */ var defaultDecodeOptions = undefined;\n/**\n * It decodes a single MessagePack object in a buffer.\n *\n * This is a synchronous decoding function.\n * See other variants for asynchronous decoding: {@link decodeAsync}, {@link decodeStream}, or {@link decodeArrayStream}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */ function decode(buffer, options) {\n    var decoder = new _Decoder_mjs__WEBPACK_IMPORTED_MODULE_0__.Decoder(options);\n    return decoder.decode(buffer);\n}\n/**\n * It decodes multiple MessagePack objects in a buffer.\n * This is corresponding to {@link decodeMultiStream}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */ function decodeMulti(buffer, options) {\n    var decoder = new _Decoder_mjs__WEBPACK_IMPORTED_MODULE_0__.Decoder(options);\n    return decoder.decodeMulti(buffer);\n} //# sourceMappingURL=decode.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vZGVjb2RlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdDO0FBQ3hDOztDQUVDLEdBQ00sSUFBSUMsdUJBQXVCQyxVQUFVO0FBQzVDOzs7Ozs7OztDQVFDLEdBQ00sU0FBU0MsT0FBT0MsTUFBTSxFQUFFQyxPQUFPO0lBQ2xDLElBQUlDLFVBQVUsSUFBSU4saURBQU9BLENBQUNLO0lBQzFCLE9BQU9DLFFBQVFILE1BQU0sQ0FBQ0M7QUFDMUI7QUFDQTs7Ozs7O0NBTUMsR0FDTSxTQUFTRyxZQUFZSCxNQUFNLEVBQUVDLE9BQU87SUFDdkMsSUFBSUMsVUFBVSxJQUFJTixpREFBT0EsQ0FBQ0s7SUFDMUIsT0FBT0MsUUFBUUMsV0FBVyxDQUFDSDtBQUMvQixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NlbHRyYS1hbW0tZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vZGVjb2RlLm1qcz8xOWJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlY29kZXIgfSBmcm9tIFwiLi9EZWNvZGVyLm1qc1wiO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBObyBsb25nZXIgc3VwcG9ydGVkLlxuICovXG5leHBvcnQgdmFyIGRlZmF1bHREZWNvZGVPcHRpb25zID0gdW5kZWZpbmVkO1xuLyoqXG4gKiBJdCBkZWNvZGVzIGEgc2luZ2xlIE1lc3NhZ2VQYWNrIG9iamVjdCBpbiBhIGJ1ZmZlci5cbiAqXG4gKiBUaGlzIGlzIGEgc3luY2hyb25vdXMgZGVjb2RpbmcgZnVuY3Rpb24uXG4gKiBTZWUgb3RoZXIgdmFyaWFudHMgZm9yIGFzeW5jaHJvbm91cyBkZWNvZGluZzoge0BsaW5rIGRlY29kZUFzeW5jfSwge0BsaW5rIGRlY29kZVN0cmVhbX0sIG9yIHtAbGluayBkZWNvZGVBcnJheVN0cmVhbX0uXG4gKlxuICogQHRocm93cyB7QGxpbmsgUmFuZ2VFcnJvcn0gaWYgdGhlIGJ1ZmZlciBpcyBpbmNvbXBsZXRlLCBpbmNsdWRpbmcgdGhlIGNhc2Ugd2hlcmUgdGhlIGJ1ZmZlciBpcyBlbXB0eS5cbiAqIEB0aHJvd3Mge0BsaW5rIERlY29kZUVycm9yfSBpZiB0aGUgYnVmZmVyIGNvbnRhaW5zIGludmFsaWQgZGF0YS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShidWZmZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGVjb2RlciA9IG5ldyBEZWNvZGVyKG9wdGlvbnMpO1xuICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShidWZmZXIpO1xufVxuLyoqXG4gKiBJdCBkZWNvZGVzIG11bHRpcGxlIE1lc3NhZ2VQYWNrIG9iamVjdHMgaW4gYSBidWZmZXIuXG4gKiBUaGlzIGlzIGNvcnJlc3BvbmRpbmcgdG8ge0BsaW5rIGRlY29kZU11bHRpU3RyZWFtfS5cbiAqXG4gKiBAdGhyb3dzIHtAbGluayBSYW5nZUVycm9yfSBpZiB0aGUgYnVmZmVyIGlzIGluY29tcGxldGUsIGluY2x1ZGluZyB0aGUgY2FzZSB3aGVyZSB0aGUgYnVmZmVyIGlzIGVtcHR5LlxuICogQHRocm93cyB7QGxpbmsgRGVjb2RlRXJyb3J9IGlmIHRoZSBidWZmZXIgY29udGFpbnMgaW52YWxpZCBkYXRhLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlTXVsdGkoYnVmZmVyLCBvcHRpb25zKSB7XG4gICAgdmFyIGRlY29kZXIgPSBuZXcgRGVjb2RlcihvcHRpb25zKTtcbiAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGVNdWx0aShidWZmZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlLm1qcy5tYXAiXSwibmFtZXMiOlsiRGVjb2RlciIsImRlZmF1bHREZWNvZGVPcHRpb25zIiwidW5kZWZpbmVkIiwiZGVjb2RlIiwiYnVmZmVyIiwib3B0aW9ucyIsImRlY29kZXIiLCJkZWNvZGVNdWx0aSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/decode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/encode.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/encode.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultEncodeOptions: () => (/* binding */ defaultEncodeOptions),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var _Encoder_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Encoder.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/Encoder.mjs\");\n\n/**\n * @deprecated No longer supported.\n */ var defaultEncodeOptions = undefined;\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */ function encode(value, options) {\n    var encoder = new _Encoder_mjs__WEBPACK_IMPORTED_MODULE_0__.Encoder(options);\n    return encoder.encodeSharedRef(value);\n} //# sourceMappingURL=encode.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vZW5jb2RlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0M7QUFDeEM7O0NBRUMsR0FDTSxJQUFJQyx1QkFBdUJDLFVBQVU7QUFDNUM7Ozs7O0NBS0MsR0FDTSxTQUFTQyxPQUFPQyxLQUFLLEVBQUVDLE9BQU87SUFDakMsSUFBSUMsVUFBVSxJQUFJTixpREFBT0EsQ0FBQ0s7SUFDMUIsT0FBT0MsUUFBUUMsZUFBZSxDQUFDSDtBQUNuQyxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NlbHRyYS1hbW0tZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vZW5jb2RlLm1qcz9kMjgyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVuY29kZXIgfSBmcm9tIFwiLi9FbmNvZGVyLm1qc1wiO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBObyBsb25nZXIgc3VwcG9ydGVkLlxuICovXG5leHBvcnQgdmFyIGRlZmF1bHRFbmNvZGVPcHRpb25zID0gdW5kZWZpbmVkO1xuLyoqXG4gKiBJdCBlbmNvZGVzIGB2YWx1ZWAgaW4gdGhlIE1lc3NhZ2VQYWNrIGZvcm1hdCBhbmRcbiAqIHJldHVybnMgYSBieXRlIGJ1ZmZlci5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgYnVmZmVyIGlzIGEgc2xpY2Ugb2YgYSBsYXJnZXIgYEFycmF5QnVmZmVyYCwgc28geW91IGhhdmUgdG8gdXNlIGl0cyBgI2J5dGVPZmZzZXRgIGFuZCBgI2J5dGVMZW5ndGhgIGluIG9yZGVyIHRvIGNvbnZlcnQgaXQgdG8gYW5vdGhlciB0eXBlZCBhcnJheXMgaW5jbHVkaW5nIE5vZGVKUyBgQnVmZmVyYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHZhciBlbmNvZGVyID0gbmV3IEVuY29kZXIob3B0aW9ucyk7XG4gICAgcmV0dXJuIGVuY29kZXIuZW5jb2RlU2hhcmVkUmVmKHZhbHVlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuY29kZS5tanMubWFwIl0sIm5hbWVzIjpbIkVuY29kZXIiLCJkZWZhdWx0RW5jb2RlT3B0aW9ucyIsInVuZGVmaW5lZCIsImVuY29kZSIsInZhbHVlIiwib3B0aW9ucyIsImVuY29kZXIiLCJlbmNvZGVTaGFyZWRSZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/encode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/timestamp.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/timestamp.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXT_TIMESTAMP: () => (/* binding */ EXT_TIMESTAMP),\n/* harmony export */   decodeTimestampExtension: () => (/* binding */ decodeTimestampExtension),\n/* harmony export */   decodeTimestampToTimeSpec: () => (/* binding */ decodeTimestampToTimeSpec),\n/* harmony export */   encodeDateToTimeSpec: () => (/* binding */ encodeDateToTimeSpec),\n/* harmony export */   encodeTimeSpecToTimestamp: () => (/* binding */ encodeTimeSpecToTimestamp),\n/* harmony export */   encodeTimestampExtension: () => (/* binding */ encodeTimestampExtension),\n/* harmony export */   timestampExtension: () => (/* binding */ timestampExtension)\n/* harmony export */ });\n/* harmony import */ var _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DecodeError.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/DecodeError.mjs\");\n/* harmony import */ var _utils_int_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/int.mjs */ \"(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/int.mjs\");\n// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\n\n\nvar EXT_TIMESTAMP = -1;\nvar TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nvar TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\nfunction encodeTimeSpecToTimestamp(_a) {\n    var sec = _a.sec, nsec = _a.nsec;\n    if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n        // Here sec >= 0 && nsec >= 0\n        if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n            // timestamp 32 = { sec32 (unsigned) }\n            var rv = new Uint8Array(4);\n            var view = new DataView(rv.buffer);\n            view.setUint32(0, sec);\n            return rv;\n        } else {\n            // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n            var secHigh = sec / 0x100000000;\n            var secLow = sec & 0xffffffff;\n            var rv = new Uint8Array(8);\n            var view = new DataView(rv.buffer);\n            // nsec30 | secHigh2\n            view.setUint32(0, nsec << 2 | secHigh & 0x3);\n            // secLow32\n            view.setUint32(4, secLow);\n            return rv;\n        }\n    } else {\n        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n        var rv = new Uint8Array(12);\n        var view = new DataView(rv.buffer);\n        view.setUint32(0, nsec);\n        (0,_utils_int_mjs__WEBPACK_IMPORTED_MODULE_0__.setInt64)(view, 4, sec);\n        return rv;\n    }\n}\nfunction encodeDateToTimeSpec(date) {\n    var msec = date.getTime();\n    var sec = Math.floor(msec / 1e3);\n    var nsec = (msec - sec * 1e3) * 1e6;\n    // Normalizes { sec, nsec } to ensure nsec is unsigned.\n    var nsecInSec = Math.floor(nsec / 1e9);\n    return {\n        sec: sec + nsecInSec,\n        nsec: nsec - nsecInSec * 1e9\n    };\n}\nfunction encodeTimestampExtension(object) {\n    if (object instanceof Date) {\n        var timeSpec = encodeDateToTimeSpec(object);\n        return encodeTimeSpecToTimestamp(timeSpec);\n    } else {\n        return null;\n    }\n}\nfunction decodeTimestampToTimeSpec(data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    // data may be 32, 64, or 96 bits\n    switch(data.byteLength){\n        case 4:\n            {\n                // timestamp 32 = { sec32 }\n                var sec = view.getUint32(0);\n                var nsec = 0;\n                return {\n                    sec: sec,\n                    nsec: nsec\n                };\n            }\n        case 8:\n            {\n                // timestamp 64 = { nsec30, sec34 }\n                var nsec30AndSecHigh2 = view.getUint32(0);\n                var secLow32 = view.getUint32(4);\n                var sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n                var nsec = nsec30AndSecHigh2 >>> 2;\n                return {\n                    sec: sec,\n                    nsec: nsec\n                };\n            }\n        case 12:\n            {\n                // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n                var sec = (0,_utils_int_mjs__WEBPACK_IMPORTED_MODULE_0__.getInt64)(view, 4, _utils_int_mjs__WEBPACK_IMPORTED_MODULE_0__.IntMode.UNSAFE_NUMBER);\n                var nsec = view.getUint32(0);\n                return {\n                    sec: sec,\n                    nsec: nsec\n                };\n            }\n        default:\n            throw new _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_1__.DecodeError(\"Unrecognized data size for timestamp (expected 4, 8, or 12): \".concat(data.length));\n    }\n}\nfunction decodeTimestampExtension(data) {\n    var timeSpec = decodeTimestampToTimeSpec(data);\n    return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\nvar timestampExtension = {\n    type: EXT_TIMESTAMP,\n    encode: encodeTimestampExtension,\n    decode: decodeTimestampExtension\n}; //# sourceMappingURL=timestamp.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/timestamp.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/int.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/utils/int.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntMode: () => (/* binding */ IntMode),\n/* harmony export */   UINT32_MAX: () => (/* binding */ UINT32_MAX),\n/* harmony export */   convertSafeIntegerToMode: () => (/* binding */ convertSafeIntegerToMode),\n/* harmony export */   getInt64: () => (/* binding */ getInt64),\n/* harmony export */   getUint64: () => (/* binding */ getUint64),\n/* harmony export */   setInt64: () => (/* binding */ setInt64),\n/* harmony export */   setUint64: () => (/* binding */ setUint64)\n/* harmony export */ });\n// Integer Utility\n/**\n * An enum of different options for decoding integers.\n */ var IntMode;\n(function(IntMode) {\n    /**\n     * Always returns the value as a number. Be aware that there will be a loss of precision if the\n     * value is outside the range of Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER.\n     */ IntMode[IntMode[\"UNSAFE_NUMBER\"] = 0] = \"UNSAFE_NUMBER\";\n    /**\n     * Always returns the value as a number, but throws an error if the value is outside of the range\n     * of Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER.\n     */ IntMode[IntMode[\"SAFE_NUMBER\"] = 1] = \"SAFE_NUMBER\";\n    /**\n     * Returns all values encoded as int64/uint64 as bigints and all other integers as numbers.\n     */ IntMode[IntMode[\"AS_ENCODED\"] = 2] = \"AS_ENCODED\";\n    /**\n     * Returns all values inside the range of Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER as\n     * numbers and all values outside that range as bigints.\n     */ IntMode[IntMode[\"MIXED\"] = 3] = \"MIXED\";\n    /**\n     * Always returns the value as a bigint, even if it is small enough to safely fit in a number.\n     */ IntMode[IntMode[\"BIGINT\"] = 4] = \"BIGINT\";\n})(IntMode || (IntMode = {}));\nvar UINT32_MAX = 4294967295;\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\nfunction setUint64(view, offset, value) {\n    var high = value / 4294967296;\n    var low = value; // high bits are truncated by DataView\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n}\nfunction setInt64(view, offset, value) {\n    var high = Math.floor(value / 4294967296);\n    var low = value; // high bits are truncated by DataView\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n}\nfunction getInt64(view, offset, mode) {\n    if (mode === IntMode.UNSAFE_NUMBER || mode === IntMode.SAFE_NUMBER) {\n        // for compatibility, don't use view.getBigInt64 if the user hasn't told us to use BigInts\n        var high = view.getInt32(offset);\n        var low = view.getUint32(offset + 4);\n        if (mode === IntMode.SAFE_NUMBER && (high < Math.floor(Number.MIN_SAFE_INTEGER / 4294967296) || high === Math.floor(Number.MIN_SAFE_INTEGER / 4294967296) && low === 0 || high > (Number.MAX_SAFE_INTEGER - low) / 4294967296)) {\n            var hexValue = \"\".concat(high < 0 ? \"-\" : \"\", \"0x\").concat(Math.abs(high).toString(16)).concat(low.toString(16).padStart(8, \"0\"));\n            throw new Error(\"Mode is IntMode.SAFE_NUMBER and value is not a safe integer: \".concat(hexValue));\n        }\n        return high * 4294967296 + low;\n    }\n    var value = view.getBigInt64(offset);\n    if (mode === IntMode.MIXED && value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER) {\n        return Number(value);\n    }\n    return value;\n}\nfunction getUint64(view, offset, mode) {\n    if (mode === IntMode.UNSAFE_NUMBER || mode === IntMode.SAFE_NUMBER) {\n        // for compatibility, don't use view.getBigUint64 if the user hasn't told us to use BigInts\n        var high = view.getUint32(offset);\n        var low = view.getUint32(offset + 4);\n        if (mode === IntMode.SAFE_NUMBER && high > (Number.MAX_SAFE_INTEGER - low) / 4294967296) {\n            var hexValue = \"0x\".concat(high.toString(16)).concat(low.toString(16).padStart(8, \"0\"));\n            throw new Error(\"Mode is IntMode.SAFE_NUMBER and value is not a safe integer: \".concat(hexValue));\n        }\n        return high * 4294967296 + low;\n    }\n    var value = view.getBigUint64(offset);\n    if (mode === IntMode.MIXED && value <= Number.MAX_SAFE_INTEGER) {\n        return Number(value);\n    }\n    return value;\n}\n/**\n * Convert a safe integer Number (i.e. in the range Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER)\n * with respect to the given IntMode. For all modes except IntMode.BIGINT, this returns the original\n * Number unmodified.\n */ function convertSafeIntegerToMode(value, mode) {\n    if (mode === IntMode.BIGINT) {\n        return BigInt(value);\n    }\n    return Number(value);\n} //# sourceMappingURL=int.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/int.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/prettyByte.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/utils/prettyByte.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prettyByte: () => (/* binding */ prettyByte)\n/* harmony export */ });\nfunction prettyByte(byte) {\n    return \"\".concat(byte < 0 ? \"-\" : \"\", \"0x\").concat(Math.abs(byte).toString(16).padStart(2, \"0\"));\n} //# sourceMappingURL=prettyByte.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vdXRpbHMvcHJldHR5Qnl0ZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLFdBQVdDLElBQUk7SUFDM0IsT0FBTyxHQUFHQyxNQUFNLENBQUNELE9BQU8sSUFBSSxNQUFNLElBQUksTUFBTUMsTUFBTSxDQUFDQyxLQUFLQyxHQUFHLENBQUNILE1BQU1JLFFBQVEsQ0FBQyxJQUFJQyxRQUFRLENBQUMsR0FBRztBQUMvRixFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NlbHRyYS1hbW0tZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vdXRpbHMvcHJldHR5Qnl0ZS5tanM/ZTAyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcHJldHR5Qnl0ZShieXRlKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGJ5dGUgPCAwID8gXCItXCIgOiBcIlwiLCBcIjB4XCIpLmNvbmNhdChNYXRoLmFicyhieXRlKS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZXR0eUJ5dGUubWpzLm1hcCJdLCJuYW1lcyI6WyJwcmV0dHlCeXRlIiwiYnl0ZSIsImNvbmNhdCIsIk1hdGgiLCJhYnMiLCJ0b1N0cmluZyIsInBhZFN0YXJ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/prettyByte.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/typedArrays.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/utils/typedArrays.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RawBinaryString: () => (/* binding */ RawBinaryString),\n/* harmony export */   compareUint8Arrays: () => (/* binding */ compareUint8Arrays),\n/* harmony export */   createDataView: () => (/* binding */ createDataView),\n/* harmony export */   ensureUint8Array: () => (/* binding */ ensureUint8Array)\n/* harmony export */ });\nfunction ensureUint8Array(buffer) {\n    if (buffer instanceof Uint8Array) {\n        return buffer;\n    } else if (ArrayBuffer.isView(buffer)) {\n        return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    } else if (buffer instanceof ArrayBuffer) {\n        return new Uint8Array(buffer);\n    } else {\n        // ArrayLike<number>\n        return Uint8Array.from(buffer);\n    }\n}\nfunction createDataView(buffer) {\n    if (buffer instanceof ArrayBuffer) {\n        return new DataView(buffer);\n    }\n    var bufferView = ensureUint8Array(buffer);\n    return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\nfunction compareUint8Arrays(a, b) {\n    var length = Math.min(a.length, b.length);\n    for(var i = 0; i < length; i++){\n        var diff = a[i] - b[i];\n        if (diff !== 0) {\n            return diff;\n        }\n    }\n    return a.length - b.length;\n}\n/**\n * Represents a binary value that should be encoded as if it were a string.\n *\n * Effectively, this is a string that has already been UTF-8 encoded to a binary string. This is\n * useful if you need to encode a value as a string, but that value contains invalid UTF-8 sequences;\n * ideally this situation should be avoided and the value should be encoded as binary, not string,\n * but this may be necessary for compatibility with non-ideal systems.\n */ var RawBinaryString = /** @class */ function() {\n    /**\n     * Create a new RawBinaryString from an ArrayBufferView.\n     */ function RawBinaryString(rawBinaryValue) {\n        this.rawBinaryValue = rawBinaryValue;\n        if (!ArrayBuffer.isView(rawBinaryValue)) {\n            throw new TypeError(\"RawBinaryString: rawBinaryValue must be an ArrayBufferView\");\n        }\n    }\n    return RawBinaryString;\n}();\n //# sourceMappingURL=typedArrays.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3JhbmQtbXNncGFjay9kaXN0LmVzNStlc20vdXRpbHMvdHlwZWRBcnJheXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxTQUFTQSxpQkFBaUJDLE1BQU07SUFDbkMsSUFBSUEsa0JBQWtCQyxZQUFZO1FBQzlCLE9BQU9EO0lBQ1gsT0FDSyxJQUFJRSxZQUFZQyxNQUFNLENBQUNILFNBQVM7UUFDakMsT0FBTyxJQUFJQyxXQUFXRCxPQUFPQSxNQUFNLEVBQUVBLE9BQU9JLFVBQVUsRUFBRUosT0FBT0ssVUFBVTtJQUM3RSxPQUNLLElBQUlMLGtCQUFrQkUsYUFBYTtRQUNwQyxPQUFPLElBQUlELFdBQVdEO0lBQzFCLE9BQ0s7UUFDRCxvQkFBb0I7UUFDcEIsT0FBT0MsV0FBV0ssSUFBSSxDQUFDTjtJQUMzQjtBQUNKO0FBQ08sU0FBU08sZUFBZVAsTUFBTTtJQUNqQyxJQUFJQSxrQkFBa0JFLGFBQWE7UUFDL0IsT0FBTyxJQUFJTSxTQUFTUjtJQUN4QjtJQUNBLElBQUlTLGFBQWFWLGlCQUFpQkM7SUFDbEMsT0FBTyxJQUFJUSxTQUFTQyxXQUFXVCxNQUFNLEVBQUVTLFdBQVdMLFVBQVUsRUFBRUssV0FBV0osVUFBVTtBQUN2RjtBQUNPLFNBQVNLLG1CQUFtQkMsQ0FBQyxFQUFFQyxDQUFDO0lBQ25DLElBQUlDLFNBQVNDLEtBQUtDLEdBQUcsQ0FBQ0osRUFBRUUsTUFBTSxFQUFFRCxFQUFFQyxNQUFNO0lBQ3hDLElBQUssSUFBSUcsSUFBSSxHQUFHQSxJQUFJSCxRQUFRRyxJQUFLO1FBQzdCLElBQUlDLE9BQU9OLENBQUMsQ0FBQ0ssRUFBRSxHQUFHSixDQUFDLENBQUNJLEVBQUU7UUFDdEIsSUFBSUMsU0FBUyxHQUFHO1lBQ1osT0FBT0E7UUFDWDtJQUNKO0lBQ0EsT0FBT04sRUFBRUUsTUFBTSxHQUFHRCxFQUFFQyxNQUFNO0FBQzlCO0FBQ0E7Ozs7Ozs7Q0FPQyxHQUNELElBQUlLLGtCQUFrQixXQUFXLEdBQUk7SUFDakM7O0tBRUMsR0FDRCxTQUFTQSxnQkFBZ0JDLGNBQWM7UUFDbkMsSUFBSSxDQUFDQSxjQUFjLEdBQUdBO1FBQ3RCLElBQUksQ0FBQ2pCLFlBQVlDLE1BQU0sQ0FBQ2dCLGlCQUFpQjtZQUNyQyxNQUFNLElBQUlDLFVBQVU7UUFDeEI7SUFDSjtJQUNBLE9BQU9GO0FBQ1g7QUFDMkIsQ0FDM0Isd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VsdHJhLWFtbS1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hbGdvcmFuZC1tc2dwYWNrL2Rpc3QuZXM1K2VzbS91dGlscy90eXBlZEFycmF5cy5tanM/Yzk3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZW5zdXJlVWludDhBcnJheShidWZmZXIpIHtcbiAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoYnVmZmVyKSkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnVmZmVyLmJ5dGVPZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBBcnJheUxpa2U8bnVtYmVyPlxuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGJ1ZmZlcik7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURhdGFWaWV3KGJ1ZmZlcikge1xuICAgIGlmIChidWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gICAgfVxuICAgIHZhciBidWZmZXJWaWV3ID0gZW5zdXJlVWludDhBcnJheShidWZmZXIpO1xuICAgIHJldHVybiBuZXcgRGF0YVZpZXcoYnVmZmVyVmlldy5idWZmZXIsIGJ1ZmZlclZpZXcuYnl0ZU9mZnNldCwgYnVmZmVyVmlldy5ieXRlTGVuZ3RoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlVWludDhBcnJheXMoYSwgYikge1xuICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRpZmYgPSBhW2ldIC0gYltpXTtcbiAgICAgICAgaWYgKGRpZmYgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBkaWZmO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhLmxlbmd0aCAtIGIubGVuZ3RoO1xufVxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYmluYXJ5IHZhbHVlIHRoYXQgc2hvdWxkIGJlIGVuY29kZWQgYXMgaWYgaXQgd2VyZSBhIHN0cmluZy5cbiAqXG4gKiBFZmZlY3RpdmVseSwgdGhpcyBpcyBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gVVRGLTggZW5jb2RlZCB0byBhIGJpbmFyeSBzdHJpbmcuIFRoaXMgaXNcbiAqIHVzZWZ1bCBpZiB5b3UgbmVlZCB0byBlbmNvZGUgYSB2YWx1ZSBhcyBhIHN0cmluZywgYnV0IHRoYXQgdmFsdWUgY29udGFpbnMgaW52YWxpZCBVVEYtOCBzZXF1ZW5jZXM7XG4gKiBpZGVhbGx5IHRoaXMgc2l0dWF0aW9uIHNob3VsZCBiZSBhdm9pZGVkIGFuZCB0aGUgdmFsdWUgc2hvdWxkIGJlIGVuY29kZWQgYXMgYmluYXJ5LCBub3Qgc3RyaW5nLFxuICogYnV0IHRoaXMgbWF5IGJlIG5lY2Vzc2FyeSBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1pZGVhbCBzeXN0ZW1zLlxuICovXG52YXIgUmF3QmluYXJ5U3RyaW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBSYXdCaW5hcnlTdHJpbmcgZnJvbSBhbiBBcnJheUJ1ZmZlclZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gUmF3QmluYXJ5U3RyaW5nKHJhd0JpbmFyeVZhbHVlKSB7XG4gICAgICAgIHRoaXMucmF3QmluYXJ5VmFsdWUgPSByYXdCaW5hcnlWYWx1ZTtcbiAgICAgICAgaWYgKCFBcnJheUJ1ZmZlci5pc1ZpZXcocmF3QmluYXJ5VmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmF3QmluYXJ5U3RyaW5nOiByYXdCaW5hcnlWYWx1ZSBtdXN0IGJlIGFuIEFycmF5QnVmZmVyVmlld1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUmF3QmluYXJ5U3RyaW5nO1xufSgpKTtcbmV4cG9ydCB7IFJhd0JpbmFyeVN0cmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZWRBcnJheXMubWpzLm1hcCJdLCJuYW1lcyI6WyJlbnN1cmVVaW50OEFycmF5IiwiYnVmZmVyIiwiVWludDhBcnJheSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJmcm9tIiwiY3JlYXRlRGF0YVZpZXciLCJEYXRhVmlldyIsImJ1ZmZlclZpZXciLCJjb21wYXJlVWludDhBcnJheXMiLCJhIiwiYiIsImxlbmd0aCIsIk1hdGgiLCJtaW4iLCJpIiwiZGlmZiIsIlJhd0JpbmFyeVN0cmluZyIsInJhd0JpbmFyeVZhbHVlIiwiVHlwZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/typedArrays.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/utf8.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/algorand-msgpack/dist.es5+esm/utils/utf8.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   utf8Count: () => (/* binding */ utf8Count),\n/* harmony export */   utf8Decode: () => (/* binding */ utf8Decode),\n/* harmony export */   utf8DecodeJs: () => (/* binding */ utf8DecodeJs),\n/* harmony export */   utf8DecodeTD: () => (/* binding */ utf8DecodeTD),\n/* harmony export */   utf8Encode: () => (/* binding */ utf8Encode),\n/* harmony export */   utf8EncodeJs: () => (/* binding */ utf8EncodeJs),\n/* harmony export */   utf8EncodeTE: () => (/* binding */ utf8EncodeTE)\n/* harmony export */ });\nfunction utf8Count(str) {\n    var strLength = str.length;\n    var byteLength = 0;\n    var pos = 0;\n    while(pos < strLength){\n        var value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            byteLength++;\n            continue;\n        } else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            byteLength += 2;\n        } else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    var extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                byteLength += 3;\n            } else {\n                // 4-byte\n                byteLength += 4;\n            }\n        }\n    }\n    return byteLength;\n}\nfunction utf8EncodeJs(str, output, outputOffset) {\n    var strLength = str.length;\n    var offset = outputOffset;\n    var pos = 0;\n    while(pos < strLength){\n        var value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            output[offset++] = value;\n            continue;\n        } else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            output[offset++] = value >> 6 & 0x1f | 0xc0;\n        } else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    var extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                output[offset++] = value >> 12 & 0x0f | 0xe0;\n                output[offset++] = value >> 6 & 0x3f | 0x80;\n            } else {\n                // 4-byte\n                output[offset++] = value >> 18 & 0x07 | 0xf0;\n                output[offset++] = value >> 12 & 0x3f | 0x80;\n                output[offset++] = value >> 6 & 0x3f | 0x80;\n            }\n        }\n        output[offset++] = value & 0x3f | 0x80;\n    }\n}\n// TextEncoder and TextDecoder are standardized in whatwg encoding:\n// https://encoding.spec.whatwg.org/\n// and available in all the modern browsers:\n// https://caniuse.com/textencoder\n// They are available in Node.js since v12 LTS as well:\n// https://nodejs.org/api/globals.html#textencoder\nvar sharedTextEncoder = new TextEncoder();\n// This threshold should be determined by benchmarking, which might vary in engines and input data.\n// Run `npx ts-node benchmark/encode-string.ts` for details.\nvar TEXT_ENCODER_THRESHOLD = 50;\nfunction utf8EncodeTE(str, output, outputOffset) {\n    sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));\n}\nfunction utf8Encode(str, output, outputOffset) {\n    if (str.length > TEXT_ENCODER_THRESHOLD) {\n        utf8EncodeTE(str, output, outputOffset);\n    } else {\n        utf8EncodeJs(str, output, outputOffset);\n    }\n}\nvar CHUNK_SIZE = 4096;\nfunction utf8DecodeJs(bytes, inputOffset, byteLength) {\n    var offset = inputOffset;\n    var end = offset + byteLength;\n    var units = [];\n    var result = \"\";\n    while(offset < end){\n        var byte1 = bytes[offset++];\n        if ((byte1 & 0x80) === 0) {\n            // 1 byte\n            units.push(byte1);\n        } else if ((byte1 & 0xe0) === 0xc0) {\n            // 2 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            units.push((byte1 & 0x1f) << 6 | byte2);\n        } else if ((byte1 & 0xf0) === 0xe0) {\n            // 3 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            var byte3 = bytes[offset++] & 0x3f;\n            units.push((byte1 & 0x1f) << 12 | byte2 << 6 | byte3);\n        } else if ((byte1 & 0xf8) === 0xf0) {\n            // 4 bytes\n            var byte2 = bytes[offset++] & 0x3f;\n            var byte3 = bytes[offset++] & 0x3f;\n            var byte4 = bytes[offset++] & 0x3f;\n            var unit = (byte1 & 0x07) << 0x12 | byte2 << 0x0c | byte3 << 0x06 | byte4;\n            if (unit > 0xffff) {\n                unit -= 0x10000;\n                units.push(unit >>> 10 & 0x3ff | 0xd800);\n                unit = 0xdc00 | unit & 0x3ff;\n            }\n            units.push(unit);\n        } else {\n            units.push(byte1);\n        }\n        if (units.length >= CHUNK_SIZE) {\n            result += String.fromCharCode.apply(String, units);\n            units.length = 0;\n        }\n    }\n    if (units.length > 0) {\n        result += String.fromCharCode.apply(String, units);\n    }\n    return result;\n}\nvar sharedTextDecoder = new TextDecoder();\n// This threshold should be determined by benchmarking, which might vary in engines and input data.\n// Run `npx ts-node benchmark/decode-string.ts` for details.\nvar TEXT_DECODER_THRESHOLD = 200;\nfunction utf8DecodeTD(bytes, inputOffset, byteLength) {\n    var stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n    return sharedTextDecoder.decode(stringBytes);\n}\nfunction utf8Decode(bytes, inputOffset, byteLength) {\n    if (byteLength > TEXT_DECODER_THRESHOLD) {\n        return utf8DecodeTD(bytes, inputOffset, byteLength);\n    } else {\n        return utf8DecodeJs(bytes, inputOffset, byteLength);\n    }\n} //# sourceMappingURL=utf8.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algorand-msgpack/dist.es5+esm/utils/utf8.mjs\n");

/***/ })

};
;