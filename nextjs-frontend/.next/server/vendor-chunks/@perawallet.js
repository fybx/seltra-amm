"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@perawallet";
exports.ids = ["vendor-chunks/@perawallet"];
exports.modules = {

/***/ "(ssr)/./node_modules/@perawallet/connect/dist/index-87e811df.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@perawallet/connect/dist/index-87e811df.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: () => (/* binding */ ct),\n/* harmony export */   a: () => (/* binding */ Wt),\n/* harmony export */   b: () => (/* binding */ Lt),\n/* harmony export */   c: () => (/* binding */ Ot),\n/* harmony export */   d: () => (/* binding */ Ut),\n/* harmony export */   e: () => (/* binding */ Bt),\n/* harmony export */   f: () => (/* binding */ dt),\n/* harmony export */   g: () => (/* binding */ ut),\n/* harmony export */   h: () => (/* binding */ ht),\n/* harmony export */   i: () => (/* binding */ Mt),\n/* harmony export */   j: () => (/* binding */ ft),\n/* harmony export */   k: () => (/* binding */ jt),\n/* harmony export */   l: () => (/* binding */ yt),\n/* harmony export */   r: () => (/* binding */ vt)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/client */ \"(ssr)/./node_modules/@walletconnect/client/dist/cjs/index.js\");\n/* harmony import */ var algosdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! algosdk */ \"(ssr)/./node_modules/algosdk/dist/esm/index.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/bowser/src/bowser.js\");\n\n\n\nvar r = \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self :  false ? 0 : {}, o = [], i = [], s = \"undefined\" != typeof Uint8Array ? Uint8Array : Array, a = !1;\nfunction l() {\n    a = !0;\n    for(var t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", e = 0; e < 64; ++e)o[e] = t[e], i[t.charCodeAt(e)] = e;\n    i[\"-\".charCodeAt(0)] = 62, i[\"_\".charCodeAt(0)] = 63;\n}\nfunction u(t, e, n) {\n    for(var r, i, s = [], a = e; a < n; a += 3)r = (t[a] << 16) + (t[a + 1] << 8) + t[a + 2], s.push(o[(i = r) >> 18 & 63] + o[i >> 12 & 63] + o[i >> 6 & 63] + o[63 & i]);\n    return s.join(\"\");\n}\nfunction c(t) {\n    var e;\n    a || l();\n    for(var n = t.length, r = n % 3, i = \"\", s = [], c = 16383, h = 0, f = n - r; h < f; h += c)s.push(u(t, h, h + c > f ? f : h + c));\n    return 1 === r ? (e = t[n - 1], i += o[e >> 2], i += o[e << 4 & 63], i += \"==\") : 2 === r && (e = (t[n - 2] << 8) + t[n - 1], i += o[e >> 10], i += o[e >> 4 & 63], i += o[e << 2 & 63], i += \"=\"), s.push(i), s.join(\"\");\n}\nfunction h(t, e, n, r, o) {\n    var i, s, a = 8 * o - r - 1, l = (1 << a) - 1, u = l >> 1, c = -7, h = n ? o - 1 : 0, f = n ? -1 : 1, d = t[e + h];\n    for(h += f, i = d & (1 << -c) - 1, d >>= -c, c += a; c > 0; i = 256 * i + t[e + h], h += f, c -= 8);\n    for(s = i & (1 << -c) - 1, i >>= -c, c += r; c > 0; s = 256 * s + t[e + h], h += f, c -= 8);\n    if (0 === i) i = 1 - u;\n    else {\n        if (i === l) return s ? NaN : 1 / 0 * (d ? -1 : 1);\n        s += Math.pow(2, r), i -= u;\n    }\n    return (d ? -1 : 1) * s * Math.pow(2, i - r);\n}\nfunction f(t, e, n, r, o, i) {\n    var s, a, l, u = 8 * i - o - 1, c = (1 << u) - 1, h = c >> 1, f = 23 === o ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d = r ? 0 : i - 1, p = r ? 1 : -1, g = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;\n    for(e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (a = isNaN(e) ? 1 : 0, s = c) : (s = Math.floor(Math.log(e) / Math.LN2), e * (l = Math.pow(2, -s)) < 1 && (s--, l *= 2), (e += s + h >= 1 ? f / l : f * Math.pow(2, 1 - h)) * l >= 2 && (s++, l /= 2), s + h >= c ? (a = 0, s = c) : s + h >= 1 ? (a = (e * l - 1) * Math.pow(2, o), s += h) : (a = e * Math.pow(2, h - 1) * Math.pow(2, o), s = 0)); o >= 8; t[n + d] = 255 & a, d += p, a /= 256, o -= 8);\n    for(s = s << o | a, u += o; u > 0; t[n + d] = 255 & s, d += p, s /= 256, u -= 8);\n    t[n + d - p] |= 128 * g;\n}\nvar d = {}.toString, p = Array.isArray || function(t) {\n    return \"[object Array]\" == d.call(t);\n};\nfunction g() {\n    return y.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;\n}\nfunction w(t, e) {\n    if (g() < e) throw new RangeError(\"Invalid typed array length\");\n    return y.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e)).__proto__ = y.prototype : (null === t && (t = new y(e)), t.length = e), t;\n}\nfunction y(t, e, n) {\n    if (!(y.TYPED_ARRAY_SUPPORT || this instanceof y)) return new y(t, e, n);\n    if (\"number\" == typeof t) {\n        if (\"string\" == typeof e) throw new Error(\"If encoding is specified then the first argument must be a string\");\n        return b(this, t);\n    }\n    return v(this, t, e, n);\n}\nfunction v(t, e, n, r) {\n    if (\"number\" == typeof e) throw new TypeError('\"value\" argument must not be a number');\n    return \"undefined\" != typeof ArrayBuffer && e instanceof ArrayBuffer ? function(t, e, n, r) {\n        if (e.byteLength, n < 0 || e.byteLength < n) throw new RangeError(\"'offset' is out of bounds\");\n        if (e.byteLength < n + (r || 0)) throw new RangeError(\"'length' is out of bounds\");\n        e = void 0 === n && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, n) : new Uint8Array(e, n, r);\n        y.TYPED_ARRAY_SUPPORT ? (t = e).__proto__ = y.prototype : t = A(t, e);\n        return t;\n    }(t, e, n, r) : \"string\" == typeof e ? function(t, e, n) {\n        \"string\" == typeof n && \"\" !== n || (n = \"utf8\");\n        if (!y.isEncoding(n)) throw new TypeError('\"encoding\" must be a valid string encoding');\n        var r = 0 | _(e, n);\n        t = w(t, r);\n        var o = t.write(e, n);\n        o !== r && (t = t.slice(0, o));\n        return t;\n    }(t, e, n) : function(t, e) {\n        if (T(e)) {\n            var n = 0 | E(e.length);\n            return 0 === (t = w(t, n)).length || e.copy(t, 0, 0, n), t;\n        }\n        if (e) {\n            if (\"undefined\" != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer || \"length\" in e) return \"number\" != typeof e.length || (r = e.length) != r ? w(t, 0) : A(t, e);\n            if (\"Buffer\" === e.type && p(e.data)) return A(t, e.data);\n        }\n        var r;\n        throw new TypeError(\"First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.\");\n    }(t, e);\n}\nfunction m(t) {\n    if (\"number\" != typeof t) throw new TypeError('\"size\" argument must be a number');\n    if (t < 0) throw new RangeError('\"size\" argument must not be negative');\n}\nfunction b(t, e) {\n    if (m(e), t = w(t, e < 0 ? 0 : 0 | E(e)), !y.TYPED_ARRAY_SUPPORT) for(var n = 0; n < e; ++n)t[n] = 0;\n    return t;\n}\nfunction A(t, e) {\n    var n = e.length < 0 ? 0 : 0 | E(e.length);\n    t = w(t, n);\n    for(var r = 0; r < n; r += 1)t[r] = 255 & e[r];\n    return t;\n}\nfunction E(t) {\n    if (t >= g()) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + g().toString(16) + \" bytes\");\n    return 0 | t;\n}\nfunction T(t) {\n    return !(null == t || !t._isBuffer);\n}\nfunction _(t, e) {\n    if (T(t)) return t.length;\n    if (\"undefined\" != typeof ArrayBuffer && \"function\" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)) return t.byteLength;\n    \"string\" != typeof t && (t = \"\" + t);\n    var n = t.length;\n    if (0 === n) return 0;\n    for(var r = !1;;)switch(e){\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n            return n;\n        case \"utf8\":\n        case \"utf-8\":\n        case void 0:\n            return V(t).length;\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return 2 * n;\n        case \"hex\":\n            return n >>> 1;\n        case \"base64\":\n            return Z(t).length;\n        default:\n            if (r) return V(t).length;\n            e = (\"\" + e).toLowerCase(), r = !0;\n    }\n}\nfunction R(t, e, n) {\n    var r = !1;\n    if ((void 0 === e || e < 0) && (e = 0), e > this.length) return \"\";\n    if ((void 0 === n || n > this.length) && (n = this.length), n <= 0) return \"\";\n    if ((n >>>= 0) <= (e >>>= 0)) return \"\";\n    for(t || (t = \"utf8\");;)switch(t){\n        case \"hex\":\n            return k(this, e, n);\n        case \"utf8\":\n        case \"utf-8\":\n            return W(this, e, n);\n        case \"ascii\":\n            return x(this, e, n);\n        case \"latin1\":\n        case \"binary\":\n            return Y(this, e, n);\n        case \"base64\":\n            return B(this, e, n);\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return j(this, e, n);\n        default:\n            if (r) throw new TypeError(\"Unknown encoding: \" + t);\n            t = (t + \"\").toLowerCase(), r = !0;\n    }\n}\nfunction S(t, e, n) {\n    var r = t[e];\n    t[e] = t[n], t[n] = r;\n}\nfunction N(t, e, n, r, o) {\n    if (0 === t.length) return -1;\n    if (\"string\" == typeof n ? (r = n, n = 0) : n > 2147483647 ? n = 2147483647 : n < -2147483648 && (n = -2147483648), n = +n, isNaN(n) && (n = o ? 0 : t.length - 1), n < 0 && (n = t.length + n), n >= t.length) {\n        if (o) return -1;\n        n = t.length - 1;\n    } else if (n < 0) {\n        if (!o) return -1;\n        n = 0;\n    }\n    if (\"string\" == typeof e && (e = y.from(e, r)), T(e)) return 0 === e.length ? -1 : C(t, e, n, r, o);\n    if (\"number\" == typeof e) return e &= 255, y.TYPED_ARRAY_SUPPORT && \"function\" == typeof Uint8Array.prototype.indexOf ? o ? Uint8Array.prototype.indexOf.call(t, e, n) : Uint8Array.prototype.lastIndexOf.call(t, e, n) : C(t, [\n        e\n    ], n, r, o);\n    throw new TypeError(\"val must be string, number or Buffer\");\n}\nfunction C(t, e, n, r, o) {\n    var i, s = 1, a = t.length, l = e.length;\n    if (void 0 !== r && (\"ucs2\" === (r = String(r).toLowerCase()) || \"ucs-2\" === r || \"utf16le\" === r || \"utf-16le\" === r)) {\n        if (t.length < 2 || e.length < 2) return -1;\n        s = 2, a /= 2, l /= 2, n /= 2;\n    }\n    function u(t, e) {\n        return 1 === s ? t[e] : t.readUInt16BE(e * s);\n    }\n    if (o) {\n        var c = -1;\n        for(i = n; i < a; i++)if (u(t, i) === u(e, -1 === c ? 0 : i - c)) {\n            if (-1 === c && (c = i), i - c + 1 === l) return c * s;\n        } else -1 !== c && (i -= i - c), c = -1;\n    } else for(n + l > a && (n = a - l), i = n; i >= 0; i--){\n        for(var h = !0, f = 0; f < l; f++)if (u(t, i + f) !== u(e, f)) {\n            h = !1;\n            break;\n        }\n        if (h) return i;\n    }\n    return -1;\n}\nfunction I(t, e, n, r) {\n    n = Number(n) || 0;\n    var o = t.length - n;\n    r ? (r = Number(r)) > o && (r = o) : r = o;\n    var i = e.length;\n    if (i % 2 != 0) throw new TypeError(\"Invalid hex string\");\n    r > i / 2 && (r = i / 2);\n    for(var s = 0; s < r; ++s){\n        var a = parseInt(e.substr(2 * s, 2), 16);\n        if (isNaN(a)) return s;\n        t[n + s] = a;\n    }\n    return s;\n}\nfunction P(t, e, n, r) {\n    return Q(V(e, t.length - n), t, n, r);\n}\nfunction O(t, e, n, r) {\n    return Q(function(t) {\n        for(var e = [], n = 0; n < t.length; ++n)e.push(255 & t.charCodeAt(n));\n        return e;\n    }(e), t, n, r);\n}\nfunction L(t, e, n, r) {\n    return O(t, e, n, r);\n}\nfunction M(t, e, n, r) {\n    return Q(Z(e), t, n, r);\n}\nfunction U(t, e, n, r) {\n    return Q(function(t, e) {\n        for(var n, r, o, i = [], s = 0; s < t.length && !((e -= 2) < 0); ++s)r = (n = t.charCodeAt(s)) >> 8, o = n % 256, i.push(o), i.push(r);\n        return i;\n    }(e, t.length - n), t, n, r);\n}\nfunction B(t, e, n) {\n    return 0 === e && n === t.length ? c(t) : c(t.slice(e, n));\n}\nfunction W(t, e, n) {\n    n = Math.min(t.length, n);\n    for(var r = [], o = e; o < n;){\n        var i, s, a, l, u = t[o], c = null, h = u > 239 ? 4 : u > 223 ? 3 : u > 191 ? 2 : 1;\n        if (o + h <= n) switch(h){\n            case 1:\n                u < 128 && (c = u);\n                break;\n            case 2:\n                128 == (192 & (i = t[o + 1])) && (l = (31 & u) << 6 | 63 & i) > 127 && (c = l);\n                break;\n            case 3:\n                i = t[o + 1], s = t[o + 2], 128 == (192 & i) && 128 == (192 & s) && (l = (15 & u) << 12 | (63 & i) << 6 | 63 & s) > 2047 && (l < 55296 || l > 57343) && (c = l);\n                break;\n            case 4:\n                i = t[o + 1], s = t[o + 2], a = t[o + 3], 128 == (192 & i) && 128 == (192 & s) && 128 == (192 & a) && (l = (15 & u) << 18 | (63 & i) << 12 | (63 & s) << 6 | 63 & a) > 65535 && l < 1114112 && (c = l);\n        }\n        null === c ? (c = 65533, h = 1) : c > 65535 && (c -= 65536, r.push(c >>> 10 & 1023 | 55296), c = 56320 | 1023 & c), r.push(c), o += h;\n    }\n    return function(t) {\n        var e = t.length;\n        if (e <= D) return String.fromCharCode.apply(String, t);\n        var n = \"\", r = 0;\n        for(; r < e;)n += String.fromCharCode.apply(String, t.slice(r, r += D));\n        return n;\n    }(r);\n}\ny.TYPED_ARRAY_SUPPORT = void 0 === r.TYPED_ARRAY_SUPPORT || r.TYPED_ARRAY_SUPPORT, g(), y.poolSize = 8192, y._augment = function(t) {\n    return t.__proto__ = y.prototype, t;\n}, y.from = function(t, e, n) {\n    return v(null, t, e, n);\n}, y.TYPED_ARRAY_SUPPORT && (y.prototype.__proto__ = Uint8Array.prototype, y.__proto__ = Uint8Array), y.alloc = function(t, e, n) {\n    return function(t, e, n, r) {\n        return m(e), e <= 0 ? w(t, e) : void 0 !== n ? \"string\" == typeof r ? w(t, e).fill(n, r) : w(t, e).fill(n) : w(t, e);\n    }(null, t, e, n);\n}, y.allocUnsafe = function(t) {\n    return b(null, t);\n}, y.allocUnsafeSlow = function(t) {\n    return b(null, t);\n}, y.isBuffer = function(t) {\n    return null != t && (!!t._isBuffer || tt(t) || function(t) {\n        return \"function\" == typeof t.readFloatLE && \"function\" == typeof t.slice && tt(t.slice(0, 0));\n    }(t));\n}, y.compare = function(t, e) {\n    if (!T(t) || !T(e)) throw new TypeError(\"Arguments must be Buffers\");\n    if (t === e) return 0;\n    for(var n = t.length, r = e.length, o = 0, i = Math.min(n, r); o < i; ++o)if (t[o] !== e[o]) {\n        n = t[o], r = e[o];\n        break;\n    }\n    return n < r ? -1 : r < n ? 1 : 0;\n}, y.isEncoding = function(t) {\n    switch(String(t).toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return !0;\n        default:\n            return !1;\n    }\n}, y.concat = function(t, e) {\n    if (!p(t)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n    if (0 === t.length) return y.alloc(0);\n    var n;\n    if (void 0 === e) for(e = 0, n = 0; n < t.length; ++n)e += t[n].length;\n    var r = y.allocUnsafe(e), o = 0;\n    for(n = 0; n < t.length; ++n){\n        var i = t[n];\n        if (!T(i)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n        i.copy(r, o), o += i.length;\n    }\n    return r;\n}, y.byteLength = _, y.prototype._isBuffer = !0, y.prototype.swap16 = function() {\n    var t = this.length;\n    if (t % 2 != 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n    for(var e = 0; e < t; e += 2)S(this, e, e + 1);\n    return this;\n}, y.prototype.swap32 = function() {\n    var t = this.length;\n    if (t % 4 != 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n    for(var e = 0; e < t; e += 4)S(this, e, e + 3), S(this, e + 1, e + 2);\n    return this;\n}, y.prototype.swap64 = function() {\n    var t = this.length;\n    if (t % 8 != 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n    for(var e = 0; e < t; e += 8)S(this, e, e + 7), S(this, e + 1, e + 6), S(this, e + 2, e + 5), S(this, e + 3, e + 4);\n    return this;\n}, y.prototype.toString = function() {\n    var t = 0 | this.length;\n    return 0 === t ? \"\" : 0 === arguments.length ? W(this, 0, t) : R.apply(this, arguments);\n}, y.prototype.equals = function(t) {\n    if (!T(t)) throw new TypeError(\"Argument must be a Buffer\");\n    return this === t || 0 === y.compare(this, t);\n}, y.prototype.inspect = function() {\n    var t = \"\";\n    return this.length > 0 && (t = this.toString(\"hex\", 0, 50).match(/.{2}/g).join(\" \"), this.length > 50 && (t += \" ... \")), \"<Buffer \" + t + \">\";\n}, y.prototype.compare = function(t, e, n, r, o) {\n    if (!T(t)) throw new TypeError(\"Argument must be a Buffer\");\n    if (void 0 === e && (e = 0), void 0 === n && (n = t ? t.length : 0), void 0 === r && (r = 0), void 0 === o && (o = this.length), e < 0 || n > t.length || r < 0 || o > this.length) throw new RangeError(\"out of range index\");\n    if (r >= o && e >= n) return 0;\n    if (r >= o) return -1;\n    if (e >= n) return 1;\n    if (this === t) return 0;\n    for(var i = (o >>>= 0) - (r >>>= 0), s = (n >>>= 0) - (e >>>= 0), a = Math.min(i, s), l = this.slice(r, o), u = t.slice(e, n), c = 0; c < a; ++c)if (l[c] !== u[c]) {\n        i = l[c], s = u[c];\n        break;\n    }\n    return i < s ? -1 : s < i ? 1 : 0;\n}, y.prototype.includes = function(t, e, n) {\n    return -1 !== this.indexOf(t, e, n);\n}, y.prototype.indexOf = function(t, e, n) {\n    return N(this, t, e, n, !0);\n}, y.prototype.lastIndexOf = function(t, e, n) {\n    return N(this, t, e, n, !1);\n}, y.prototype.write = function(t, e, n, r) {\n    if (void 0 === e) r = \"utf8\", n = this.length, e = 0;\n    else if (void 0 === n && \"string\" == typeof e) r = e, n = this.length, e = 0;\n    else {\n        if (!isFinite(e)) throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n        e |= 0, isFinite(n) ? (n |= 0, void 0 === r && (r = \"utf8\")) : (r = n, n = void 0);\n    }\n    var o = this.length - e;\n    if ((void 0 === n || n > o) && (n = o), t.length > 0 && (n < 0 || e < 0) || e > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");\n    r || (r = \"utf8\");\n    for(var i = !1;;)switch(r){\n        case \"hex\":\n            return I(this, t, e, n);\n        case \"utf8\":\n        case \"utf-8\":\n            return P(this, t, e, n);\n        case \"ascii\":\n            return O(this, t, e, n);\n        case \"latin1\":\n        case \"binary\":\n            return L(this, t, e, n);\n        case \"base64\":\n            return M(this, t, e, n);\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return U(this, t, e, n);\n        default:\n            if (i) throw new TypeError(\"Unknown encoding: \" + r);\n            r = (\"\" + r).toLowerCase(), i = !0;\n    }\n}, y.prototype.toJSON = function() {\n    return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n};\nvar D = 4096;\nfunction x(t, e, n) {\n    var r = \"\";\n    n = Math.min(t.length, n);\n    for(var o = e; o < n; ++o)r += String.fromCharCode(127 & t[o]);\n    return r;\n}\nfunction Y(t, e, n) {\n    var r = \"\";\n    n = Math.min(t.length, n);\n    for(var o = e; o < n; ++o)r += String.fromCharCode(t[o]);\n    return r;\n}\nfunction k(t, e, n) {\n    var r = t.length;\n    (!e || e < 0) && (e = 0), (!n || n < 0 || n > r) && (n = r);\n    for(var o = \"\", i = e; i < n; ++i)o += J(t[i]);\n    return o;\n}\nfunction j(t, e, n) {\n    for(var r = t.slice(e, n), o = \"\", i = 0; i < r.length; i += 2)o += String.fromCharCode(r[i] + 256 * r[i + 1]);\n    return o;\n}\nfunction $(t, e, n) {\n    if (t % 1 != 0 || t < 0) throw new RangeError(\"offset is not uint\");\n    if (t + e > n) throw new RangeError(\"Trying to access beyond buffer length\");\n}\nfunction G(t, e, n, r, o, i) {\n    if (!T(t)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (e > o || e < i) throw new RangeError('\"value\" argument is out of bounds');\n    if (n + r > t.length) throw new RangeError(\"Index out of range\");\n}\nfunction q(t, e, n, r) {\n    e < 0 && (e = 65535 + e + 1);\n    for(var o = 0, i = Math.min(t.length - n, 2); o < i; ++o)t[n + o] = (e & 255 << 8 * (r ? o : 1 - o)) >>> 8 * (r ? o : 1 - o);\n}\nfunction z(t, e, n, r) {\n    e < 0 && (e = 4294967295 + e + 1);\n    for(var o = 0, i = Math.min(t.length - n, 4); o < i; ++o)t[n + o] = e >>> 8 * (r ? o : 3 - o) & 255;\n}\nfunction F(t, e, n, r, o, i) {\n    if (n + r > t.length) throw new RangeError(\"Index out of range\");\n    if (n < 0) throw new RangeError(\"Index out of range\");\n}\nfunction H(t, e, n, r, o) {\n    return o || F(t, 0, n, 4), f(t, e, n, r, 23, 4), n + 4;\n}\nfunction K(t, e, n, r, o) {\n    return o || F(t, 0, n, 8), f(t, e, n, r, 52, 8), n + 8;\n}\ny.prototype.slice = function(t, e) {\n    var n, r = this.length;\n    if ((t = ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), (e = void 0 === e ? r : ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), e < t && (e = t), y.TYPED_ARRAY_SUPPORT) (n = this.subarray(t, e)).__proto__ = y.prototype;\n    else {\n        var o = e - t;\n        n = new y(o, void 0);\n        for(var i = 0; i < o; ++i)n[i] = this[i + t];\n    }\n    return n;\n}, y.prototype.readUIntLE = function(t, e, n) {\n    t |= 0, e |= 0, n || $(t, e, this.length);\n    for(var r = this[t], o = 1, i = 0; ++i < e && (o *= 256);)r += this[t + i] * o;\n    return r;\n}, y.prototype.readUIntBE = function(t, e, n) {\n    t |= 0, e |= 0, n || $(t, e, this.length);\n    for(var r = this[t + --e], o = 1; e > 0 && (o *= 256);)r += this[t + --e] * o;\n    return r;\n}, y.prototype.readUInt8 = function(t, e) {\n    return e || $(t, 1, this.length), this[t];\n}, y.prototype.readUInt16LE = function(t, e) {\n    return e || $(t, 2, this.length), this[t] | this[t + 1] << 8;\n}, y.prototype.readUInt16BE = function(t, e) {\n    return e || $(t, 2, this.length), this[t] << 8 | this[t + 1];\n}, y.prototype.readUInt32LE = function(t, e) {\n    return e || $(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3];\n}, y.prototype.readUInt32BE = function(t, e) {\n    return e || $(t, 4, this.length), 16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);\n}, y.prototype.readIntLE = function(t, e, n) {\n    t |= 0, e |= 0, n || $(t, e, this.length);\n    for(var r = this[t], o = 1, i = 0; ++i < e && (o *= 256);)r += this[t + i] * o;\n    return r >= (o *= 128) && (r -= Math.pow(2, 8 * e)), r;\n}, y.prototype.readIntBE = function(t, e, n) {\n    t |= 0, e |= 0, n || $(t, e, this.length);\n    for(var r = e, o = 1, i = this[t + --r]; r > 0 && (o *= 256);)i += this[t + --r] * o;\n    return i >= (o *= 128) && (i -= Math.pow(2, 8 * e)), i;\n}, y.prototype.readInt8 = function(t, e) {\n    return e || $(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t];\n}, y.prototype.readInt16LE = function(t, e) {\n    e || $(t, 2, this.length);\n    var n = this[t] | this[t + 1] << 8;\n    return 32768 & n ? 4294901760 | n : n;\n}, y.prototype.readInt16BE = function(t, e) {\n    e || $(t, 2, this.length);\n    var n = this[t + 1] | this[t] << 8;\n    return 32768 & n ? 4294901760 | n : n;\n}, y.prototype.readInt32LE = function(t, e) {\n    return e || $(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;\n}, y.prototype.readInt32BE = function(t, e) {\n    return e || $(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];\n}, y.prototype.readFloatLE = function(t, e) {\n    return e || $(t, 4, this.length), h(this, t, !0, 23, 4);\n}, y.prototype.readFloatBE = function(t, e) {\n    return e || $(t, 4, this.length), h(this, t, !1, 23, 4);\n}, y.prototype.readDoubleLE = function(t, e) {\n    return e || $(t, 8, this.length), h(this, t, !0, 52, 8);\n}, y.prototype.readDoubleBE = function(t, e) {\n    return e || $(t, 8, this.length), h(this, t, !1, 52, 8);\n}, y.prototype.writeUIntLE = function(t, e, n, r) {\n    (t = +t, e |= 0, n |= 0, r) || G(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);\n    var o = 1, i = 0;\n    for(this[e] = 255 & t; ++i < n && (o *= 256);)this[e + i] = t / o & 255;\n    return e + n;\n}, y.prototype.writeUIntBE = function(t, e, n, r) {\n    (t = +t, e |= 0, n |= 0, r) || G(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);\n    var o = n - 1, i = 1;\n    for(this[e + o] = 255 & t; --o >= 0 && (i *= 256);)this[e + o] = t / i & 255;\n    return e + n;\n}, y.prototype.writeUInt8 = function(t, e, n) {\n    return t = +t, e |= 0, n || G(this, t, e, 1, 255, 0), y.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), this[e] = 255 & t, e + 1;\n}, y.prototype.writeUInt16LE = function(t, e, n) {\n    return t = +t, e |= 0, n || G(this, t, e, 2, 65535, 0), y.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : q(this, t, e, !0), e + 2;\n}, y.prototype.writeUInt16BE = function(t, e, n) {\n    return t = +t, e |= 0, n || G(this, t, e, 2, 65535, 0), y.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : q(this, t, e, !1), e + 2;\n}, y.prototype.writeUInt32LE = function(t, e, n) {\n    return t = +t, e |= 0, n || G(this, t, e, 4, 4294967295, 0), y.TYPED_ARRAY_SUPPORT ? (this[e + 3] = t >>> 24, this[e + 2] = t >>> 16, this[e + 1] = t >>> 8, this[e] = 255 & t) : z(this, t, e, !0), e + 4;\n}, y.prototype.writeUInt32BE = function(t, e, n) {\n    return t = +t, e |= 0, n || G(this, t, e, 4, 4294967295, 0), y.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : z(this, t, e, !1), e + 4;\n}, y.prototype.writeIntLE = function(t, e, n, r) {\n    if (t = +t, e |= 0, !r) {\n        var o = Math.pow(2, 8 * n - 1);\n        G(this, t, e, n, o - 1, -o);\n    }\n    var i = 0, s = 1, a = 0;\n    for(this[e] = 255 & t; ++i < n && (s *= 256);)t < 0 && 0 === a && 0 !== this[e + i - 1] && (a = 1), this[e + i] = (t / s | 0) - a & 255;\n    return e + n;\n}, y.prototype.writeIntBE = function(t, e, n, r) {\n    if (t = +t, e |= 0, !r) {\n        var o = Math.pow(2, 8 * n - 1);\n        G(this, t, e, n, o - 1, -o);\n    }\n    var i = n - 1, s = 1, a = 0;\n    for(this[e + i] = 255 & t; --i >= 0 && (s *= 256);)t < 0 && 0 === a && 0 !== this[e + i + 1] && (a = 1), this[e + i] = (t / s | 0) - a & 255;\n    return e + n;\n}, y.prototype.writeInt8 = function(t, e, n) {\n    return t = +t, e |= 0, n || G(this, t, e, 1, 127, -128), y.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), t < 0 && (t = 255 + t + 1), this[e] = 255 & t, e + 1;\n}, y.prototype.writeInt16LE = function(t, e, n) {\n    return t = +t, e |= 0, n || G(this, t, e, 2, 32767, -32768), y.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : q(this, t, e, !0), e + 2;\n}, y.prototype.writeInt16BE = function(t, e, n) {\n    return t = +t, e |= 0, n || G(this, t, e, 2, 32767, -32768), y.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : q(this, t, e, !1), e + 2;\n}, y.prototype.writeInt32LE = function(t, e, n) {\n    return t = +t, e |= 0, n || G(this, t, e, 4, 2147483647, -2147483648), y.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8, this[e + 2] = t >>> 16, this[e + 3] = t >>> 24) : z(this, t, e, !0), e + 4;\n}, y.prototype.writeInt32BE = function(t, e, n) {\n    return t = +t, e |= 0, n || G(this, t, e, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), y.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : z(this, t, e, !1), e + 4;\n}, y.prototype.writeFloatLE = function(t, e, n) {\n    return H(this, t, e, !0, n);\n}, y.prototype.writeFloatBE = function(t, e, n) {\n    return H(this, t, e, !1, n);\n}, y.prototype.writeDoubleLE = function(t, e, n) {\n    return K(this, t, e, !0, n);\n}, y.prototype.writeDoubleBE = function(t, e, n) {\n    return K(this, t, e, !1, n);\n}, y.prototype.copy = function(t, e, n, r) {\n    if (n || (n = 0), r || 0 === r || (r = this.length), e >= t.length && (e = t.length), e || (e = 0), r > 0 && r < n && (r = n), r === n) return 0;\n    if (0 === t.length || 0 === this.length) return 0;\n    if (e < 0) throw new RangeError(\"targetStart out of bounds\");\n    if (n < 0 || n >= this.length) throw new RangeError(\"sourceStart out of bounds\");\n    if (r < 0) throw new RangeError(\"sourceEnd out of bounds\");\n    r > this.length && (r = this.length), t.length - e < r - n && (r = t.length - e + n);\n    var o, i = r - n;\n    if (this === t && n < e && e < r) for(o = i - 1; o >= 0; --o)t[o + e] = this[o + n];\n    else if (i < 1e3 || !y.TYPED_ARRAY_SUPPORT) for(o = 0; o < i; ++o)t[o + e] = this[o + n];\n    else Uint8Array.prototype.set.call(t, this.subarray(n, n + i), e);\n    return i;\n}, y.prototype.fill = function(t, e, n, r) {\n    if (\"string\" == typeof t) {\n        if (\"string\" == typeof e ? (r = e, e = 0, n = this.length) : \"string\" == typeof n && (r = n, n = this.length), 1 === t.length) {\n            var o = t.charCodeAt(0);\n            o < 256 && (t = o);\n        }\n        if (void 0 !== r && \"string\" != typeof r) throw new TypeError(\"encoding must be a string\");\n        if (\"string\" == typeof r && !y.isEncoding(r)) throw new TypeError(\"Unknown encoding: \" + r);\n    } else \"number\" == typeof t && (t &= 255);\n    if (e < 0 || this.length < e || this.length < n) throw new RangeError(\"Out of range index\");\n    if (n <= e) return this;\n    var i;\n    if (e >>>= 0, n = void 0 === n ? this.length : n >>> 0, t || (t = 0), \"number\" == typeof t) for(i = e; i < n; ++i)this[i] = t;\n    else {\n        var s = T(t) ? t : V(new y(t, r).toString()), a = s.length;\n        for(i = 0; i < n - e; ++i)this[i + e] = s[i % a];\n    }\n    return this;\n};\nvar X = /[^+\\/0-9A-Za-z-_]/g;\nfunction J(t) {\n    return t < 16 ? \"0\" + t.toString(16) : t.toString(16);\n}\nfunction V(t, e) {\n    var n;\n    e = e || 1 / 0;\n    for(var r = t.length, o = null, i = [], s = 0; s < r; ++s){\n        if ((n = t.charCodeAt(s)) > 55295 && n < 57344) {\n            if (!o) {\n                if (n > 56319) {\n                    (e -= 3) > -1 && i.push(239, 191, 189);\n                    continue;\n                }\n                if (s + 1 === r) {\n                    (e -= 3) > -1 && i.push(239, 191, 189);\n                    continue;\n                }\n                o = n;\n                continue;\n            }\n            if (n < 56320) {\n                (e -= 3) > -1 && i.push(239, 191, 189), o = n;\n                continue;\n            }\n            n = 65536 + (o - 55296 << 10 | n - 56320);\n        } else o && (e -= 3) > -1 && i.push(239, 191, 189);\n        if (o = null, n < 128) {\n            if ((e -= 1) < 0) break;\n            i.push(n);\n        } else if (n < 2048) {\n            if ((e -= 2) < 0) break;\n            i.push(n >> 6 | 192, 63 & n | 128);\n        } else if (n < 65536) {\n            if ((e -= 3) < 0) break;\n            i.push(n >> 12 | 224, n >> 6 & 63 | 128, 63 & n | 128);\n        } else {\n            if (!(n < 1114112)) throw new Error(\"Invalid code point\");\n            if ((e -= 4) < 0) break;\n            i.push(n >> 18 | 240, n >> 12 & 63 | 128, n >> 6 & 63 | 128, 63 & n | 128);\n        }\n    }\n    return i;\n}\nfunction Z(t) {\n    return function(t) {\n        var e, n, r, o, u, c;\n        a || l();\n        var h = t.length;\n        if (h % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        u = \"=\" === t[h - 2] ? 2 : \"=\" === t[h - 1] ? 1 : 0, c = new s(3 * h / 4 - u), r = u > 0 ? h - 4 : h;\n        var f = 0;\n        for(e = 0, n = 0; e < r; e += 4, n += 3)o = i[t.charCodeAt(e)] << 18 | i[t.charCodeAt(e + 1)] << 12 | i[t.charCodeAt(e + 2)] << 6 | i[t.charCodeAt(e + 3)], c[f++] = o >> 16 & 255, c[f++] = o >> 8 & 255, c[f++] = 255 & o;\n        return 2 === u ? (o = i[t.charCodeAt(e)] << 2 | i[t.charCodeAt(e + 1)] >> 4, c[f++] = 255 & o) : 1 === u && (o = i[t.charCodeAt(e)] << 10 | i[t.charCodeAt(e + 1)] << 4 | i[t.charCodeAt(e + 2)] >> 2, c[f++] = o >> 8 & 255, c[f++] = 255 & o), c;\n    }(function(t) {\n        if ((t = (function(t) {\n            return t.trim ? t.trim() : t.replace(/^\\s+|\\s+$/g, \"\");\n        })(t).replace(X, \"\")).length < 2) return \"\";\n        for(; t.length % 4 != 0;)t += \"=\";\n        return t;\n    }(t));\n}\nfunction Q(t, e, n, r) {\n    for(var o = 0; o < r && !(o + n >= e.length || o >= t.length); ++o)e[o + n] = t[o];\n    return o;\n}\nfunction tt(t) {\n    return !!t.constructor && \"function\" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t);\n}\nfunction et(t, e, n, r) {\n    return new (n || (n = Promise))(function(o, i) {\n        function s(t) {\n            try {\n                l(r.next(t));\n            } catch (t) {\n                i(t);\n            }\n        }\n        function a(t) {\n            try {\n                l(r.throw(t));\n            } catch (t) {\n                i(t);\n            }\n        }\n        function l(t) {\n            var e;\n            t.done ? o(t.value) : (e = t.value, e instanceof n ? e : new n(function(t) {\n                t(e);\n            })).then(s, a);\n        }\n        l((r = r.apply(t, e || [])).next());\n    });\n}\n\"function\" == typeof SuppressedError && SuppressedError;\nclass nt extends Error {\n    constructor(t, e, ...n){\n        super(...n), Error.captureStackTrace && Error.captureStackTrace(this, nt), this.name = \"PeraWalletConnectError\", this.data = t, this.message = e;\n    }\n}\nconst rt = new class {\n    constructor(t){\n        this.listener = void 0, this.channel = t.channel;\n    }\n    setupListener({ onReceiveMessage: t }) {\n        this.close(), this.listener = (e)=>{\n            if (\"object\" == typeof e.data) try {\n                e.data.channel === this.channel && t(e);\n            } catch (t) {\n                console.error(t);\n            }\n        }, window.addEventListener(\"message\", this.listener);\n    }\n    sendMessage({ message: t, targetWindow: e, origin: n, timeout: r = 1e3 }) {\n        setTimeout(()=>{\n            const r = {\n                channel: this.channel,\n                message: t\n            };\n            e.postMessage(r, {\n                targetOrigin: n || \"*\"\n            });\n        }, r);\n    }\n    close() {\n        this.listener && (window.removeEventListener(\"message\", this.listener), this.listener = void 0);\n    }\n}({\n    channel: \"pera-web-wallet\"\n}), ot = 700, it = 50;\nfunction st() {\n    const t = document.querySelector('meta[name=\"name\"]'), e = document.querySelector('meta[name=\"description\"]');\n    let { title: n } = document, r = \"\";\n    return t instanceof HTMLMetaElement && (n = t.content), e instanceof HTMLMetaElement && (r = e.content), {\n        title: n,\n        description: r,\n        url: window.location.origin,\n        favicon: at()[0]\n    };\n}\nfunction at() {\n    const t = document.getElementsByTagName(\"link\"), e = [];\n    for(let n = 0; n < t.length; n++){\n        const r = t[n], o = r.getAttribute(\"rel\");\n        if (o && o.toLowerCase().indexOf(\"icon\") > -1) {\n            const t = r.getAttribute(\"href\");\n            if (t && -1 === t.toLowerCase().indexOf(\"https:\") && -1 === t.toLowerCase().indexOf(\"http:\") && 0 !== t.indexOf(\"//\")) {\n                let n = `${window.location.protocol}//${window.location.host}`;\n                if (0 === t.indexOf(\"/\")) n += t;\n                else {\n                    const e = window.location.pathname.split(\"/\");\n                    e.pop();\n                    n += `${e.join(\"/\")}/${t}`;\n                }\n                e.push(n);\n            } else if (0 === (null == t ? void 0 : t.indexOf(\"//\"))) {\n                const n = window.location.protocol + t;\n                e.push(n);\n            } else t && e.push(t);\n        }\n    }\n    return e;\n}\nfunction lt(t) {\n    return new Promise((e, n)=>{\n        try {\n            const r = window.open(t, \"_blank\");\n            let o = 0;\n            const i = setInterval(()=>{\n                if (o += 1, o === it) return clearInterval(i), void n(new nt({\n                    type: \"MESSAGE_NOT_RECEIVED\"\n                }, \"Couldn't open Pera Wallet, please try again.\"));\n                r && (!0 === r.closed && (clearInterval(i), n(new nt({\n                    type: \"OPERATION_CANCELLED\"\n                }, \"Operation cancelled by user\"))), rt.sendMessage({\n                    message: {\n                        type: \"TAB_OPEN\"\n                    },\n                    origin: t,\n                    targetWindow: r\n                }));\n            }, ot);\n            rt.setupListener({\n                onReceiveMessage: (t)=>{\n                    \"TAB_OPEN_RECEIVED\" === t.data.message.type && (clearInterval(i), e(r));\n                }\n            });\n        } catch (t) {\n            n(t);\n        }\n    });\n}\nconst ut = \"pera-wallet-connect-modal-wrapper\", ct = \"pera-wallet-redirect-modal-wrapper\", ht = \"pera-wallet-sign-txn-toast-wrapper\", ft = \"pera-wallet-sign-txn-modal-wrapper\", dt = \"pera-wallet-modal\";\nfunction pt(t) {\n    const e = document.createElement(\"div\");\n    return e.setAttribute(\"id\", t), document.body.appendChild(e), e;\n}\nfunction gt() {\n    pt(ct).innerHTML = \"<pera-wallet-redirect-modal></pera-wallet-redirect-modal>\";\n}\nfunction wt() {\n    pt(ht).innerHTML = \"<pera-wallet-sign-txn-toast></pera-wallet-sign-txn-toast>\";\n}\nfunction yt() {\n    vt(ht);\n}\nfunction vt(t) {\n    const e = document.getElementById(t);\n    e && e.remove();\n}\nconst mt = {\n    WALLET: \"PeraWallet.Wallet\",\n    WALLETCONNECT: \"walletconnect\"\n};\nfunction bt() {\n    return \"undefined\" == typeof localStorage ? void 0 : localStorage;\n}\nfunction At(t, e) {\n    var n;\n    null === (n = bt()) || void 0 === n || n.setItem(mt.WALLET, JSON.stringify({\n        type: e || \"pera-wallet\",\n        accounts: t,\n        selectedAccount: t[0]\n    }));\n}\nfunction Et() {\n    var t;\n    const e = null === (t = bt()) || void 0 === t ? void 0 : t.getItem(mt.WALLET);\n    return e ? JSON.parse(e) : null;\n}\nfunction Tt() {\n    return new Promise((t, e)=>{\n        var n, r;\n        try {\n            null === (n = bt()) || void 0 === n || n.removeItem(mt.WALLETCONNECT), null === (r = bt()) || void 0 === r || r.removeItem(mt.WALLET), t(void 0);\n        } catch (t) {\n            e(t);\n        }\n    });\n}\nfunction _t(t) {\n    const e = t.slice();\n    for(let t = e.length - 1; t > 0; t--){\n        const n = Math.floor(Math.random() * (t + 1));\n        [e[t], e[n]] = [\n            e[n],\n            e[t]\n        ];\n    }\n    return e;\n}\nconst Rt = \"https://wc.perawallet.app/config.json\";\nfunction St() {\n    return function(t, e = {}) {\n        return fetch(t, e).then((t)=>t.json()).then((t)=>t);\n    }(Rt, {\n        cache: \"no-store\"\n    });\n}\nfunction Nt() {\n    return et(this, void 0, void 0, function*() {\n        let t = {\n            bridgeURL: \"\",\n            webWalletURL: \"\",\n            isWebWalletAvailable: !1,\n            shouldDisplayNewBadge: !1,\n            shouldUseSound: !0,\n            silent: !1,\n            promoteMobile: !1\n        };\n        try {\n            const e = yield St();\n            void 0 !== e.web_wallet && e.web_wallet_url && (t.isWebWalletAvailable = e.web_wallet), void 0 !== e.display_new_badge && (t.shouldDisplayNewBadge = e.display_new_badge), void 0 !== e.use_sound && (t.shouldUseSound = e.use_sound), void 0 !== e.silent && (t.silent = e.silent), void 0 !== e.promote_mobile && (t.promoteMobile = e.promote_mobile), t = Object.assign(Object.assign({}, t), {\n                bridgeURL: _t(e.servers || [])[0] || \"\",\n                webWalletURL: e.web_wallet_url || \"\"\n            });\n        } catch (t) {\n            console.log(t);\n        }\n        return t;\n    });\n}\nfunction Ct(t) {\n    return Uint8Array.from(window.atob(t), (t)=>t.charCodeAt(0));\n}\nfunction It(t, e) {\n    return {\n        id: Date.now() * Math.pow(10, 3) + Math.floor(Math.random() * Math.pow(10, 3)),\n        jsonrpc: \"2.0\",\n        method: t,\n        params: e\n    };\n}\nfunction Pt() {\n    return \"undefined\" != typeof navigator;\n}\nfunction Ot() {\n    return Pt() && /Android/i.test(navigator.userAgent);\n}\nfunction Lt() {\n    return Pt() && /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\nfunction Mt() {\n    return Pt() && /iPhone|iPod|Android/i.test(navigator.userAgent);\n}\nfunction Ut() {\n    if (!Pt()) return null;\n    const { userAgent: t } = navigator;\n    let e;\n    return e = t.match(/DuckDuckGo/i) ? \"DuckDuckGo\" : t.match(/OPX/i) ? \"Opera GX\" : navigator.brave ? \"Brave\" : bowser__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getParser(navigator.userAgent).getBrowserName(), e;\n}\nconst Bt = \"perawallet-wc://\", Wt = \"https://perawallet.app/download/\";\nfunction Dt(t) {\n    return {\n        ROOT: `https://${t}`,\n        CONNECT: `https://${t}/connect`,\n        TRANSACTION_SIGN: `https://${t}/transaction/sign`\n    };\n}\nfunction xt({ method: t, signTxnRequestParams: e, signer: n, chainId: r, webWalletURL: o, resolve: i, reject: s }) {\n    const a = Dt(o);\n    !function() {\n        et(this, void 0, void 0, function*() {\n            try {\n                const o = yield lt(a.TRANSACTION_SIGN);\n                if (o) {\n                    let i;\n                    \"SIGN_TXN\" === t ? i = {\n                        type: \"SIGN_TXN\",\n                        txn: e\n                    } : \"SIGN_DATA\" === t && n && r && (i = {\n                        type: \"SIGN_DATA\",\n                        data: e,\n                        signer: n,\n                        chainId: r\n                    }), i && rt.sendMessage({\n                        message: i,\n                        origin: a.TRANSACTION_SIGN,\n                        targetWindow: o\n                    });\n                }\n                const l = setInterval(()=>{\n                    !0 === (null == o ? void 0 : o.closed) && (s(new nt({\n                        type: `${t}_CANCELLED`\n                    }, \"Transaction signing is cancelled by user.\")), clearInterval(l));\n                }, 2e3);\n                rt.setupListener({\n                    onReceiveMessage: (e)=>(function({ event: t, newPeraWalletTab: e, method: n, resolve: r, reject: o }) {\n                            switch(t.data.message.type){\n                                case \"SIGN_TXN_CALLBACK\":\n                                    null == e || e.close(), r(t.data.message.signedTxns.map((t)=>Ct(t.signedTxn)));\n                                    break;\n                                case \"SIGN_DATA_CALLBACK\":\n                                    null == e || e.close(), r(t.data.message.signedData.map((t)=>Ct(t.signedData)));\n                                    break;\n                                case \"SIGN_TXN_NETWORK_MISMATCH\":\n                                    o(new nt({\n                                        type: `${n}_NETWORK_MISMATCH`,\n                                        detail: t.data.message.error\n                                    }, t.data.message.error || \"Network mismatch\"));\n                                    break;\n                                case \"SIGN_TXN_CALLBACK_ERROR\":\n                                    null == e || e.close(), o(new nt({\n                                        type: `${n}_CANCELLED`\n                                    }, t.data.message.error));\n                                    break;\n                                case \"SESSION_DISCONNECTED\":\n                                    null == e || e.close(), Tt(), o(new nt({\n                                        type: \"SESSION_DISCONNECTED\",\n                                        detail: t.data.message.error\n                                    }, t.data.message.error));\n                            }\n                        })({\n                            event: e,\n                            newPeraWalletTab: o,\n                            method: t,\n                            resolve: i,\n                            reject: s\n                        })\n                });\n            } catch (t) {\n                s(t);\n            }\n        });\n    }();\n}\nfunction Yt({ webWalletURL: t, chainId: e, resolve: n, reject: r }) {\n    const o = Dt(t);\n    return function() {\n        return et(this, void 0, void 0, function*() {\n            try {\n                const t = yield lt(o.CONNECT);\n                t && rt.sendMessage({\n                    message: {\n                        type: \"CONNECT\",\n                        data: Object.assign(Object.assign({}, st()), {\n                            chainId: e\n                        })\n                    },\n                    origin: o.CONNECT,\n                    targetWindow: t\n                });\n                const s = setInterval(()=>{\n                    !0 === (null == t ? void 0 : t.closed) && (r(new nt({\n                        type: \"CONNECT_CANCELLED\"\n                    }, \"Connect is cancelled by user\")), clearInterval(s), i());\n                }, 2e3);\n                rt.setupListener({\n                    onReceiveMessage: (e)=>(function({ event: t, newPeraWalletTab: e, resolve: n, reject: r }) {\n                            if (n && \"CONNECT_CALLBACK\" === t.data.message.type) {\n                                const r = t.data.message.data.addresses;\n                                At(r, \"pera-wallet-web\"), n(r), vt(ut), null == e || e.close();\n                            } else \"CONNECT_NETWORK_MISMATCH\" === t.data.message.type && (r(new nt({\n                                type: \"CONNECT_NETWORK_MISMATCH\",\n                                detail: t.data.message.error\n                            }, t.data.message.error || \"Your wallet is connected to a different network to this dApp. Update your wallet to the correct network (MainNet or TestNet) to continue.\")), vt(ut), null == e || e.close());\n                        })({\n                            event: e,\n                            newPeraWalletTab: t,\n                            resolve: n,\n                            reject: r\n                        })\n                });\n            } catch (t) {\n                i(), r(t);\n            }\n        });\n    };\n    function i() {\n        vt(ut);\n    }\n}\nfunction kt({ isWebWalletAvailable: t, shouldDisplayNewBadge: e, shouldUseSound: n, compactMode: r, promoteMobile: o, singleAccount: i, selectedAccount: s }) {\n    return {\n        open: (a = {\n            isWebWalletAvailable: t,\n            shouldDisplayNewBadge: e,\n            shouldUseSound: n,\n            compactMode: r,\n            promoteMobile: o,\n            singleAccount: i,\n            selectedAccount: s\n        }, (t)=>{\n            if (!document.getElementById(ut)) {\n                const e = pt(ut), n = `${t}&algorand=true`, { isWebWalletAvailable: r, shouldDisplayNewBadge: o, shouldUseSound: i, compactMode: s, promoteMobile: l, singleAccount: u, selectedAccount: c } = a;\n                e.innerHTML = `<pera-wallet-connect-modal uri=\"${n}\" is-web-wallet-avaliable=\"${r}\" should-display-new-badge=\"${o}\" should-use-sound=\"${i}\" compact-mode=\"${s}\" promote-mobile=\"${l}\" single-account=\"${u}\" selected-account=\"${c || \"\"}\"></pera-wallet-connect-modal>`;\n            }\n        }),\n        close: ()=>vt(ut)\n    };\n    var a;\n}\nclass jt {\n    constructor(t){\n        this.bridge = (null == t ? void 0 : t.bridge) || \"\", this.connector = null, this.shouldShowSignTxnToast = void 0 === (null == t ? void 0 : t.shouldShowSignTxnToast) || t.shouldShowSignTxnToast, this.chainId = null == t ? void 0 : t.chainId, this.compactMode = (null == t ? void 0 : t.compactMode) || !1, this.singleAccount = (null == t ? void 0 : t.singleAccount) || !1;\n    }\n    get platform() {\n        return function() {\n            const t = Et();\n            let e = null;\n            return \"pera-wallet\" === (null == t ? void 0 : t.type) ? e = \"mobile\" : \"pera-wallet-web\" === (null == t ? void 0 : t.type) && (e = \"web\"), e;\n        }();\n    }\n    get isConnected() {\n        var t;\n        return \"mobile\" === this.platform ? !!this.connector : \"web\" === this.platform && !!(null === (t = Et()) || void 0 === t ? void 0 : t.accounts.length);\n    }\n    get isPeraDiscoverBrowser() {\n        return this.checkIsPeraDiscoverBrowser();\n    }\n    connect(e) {\n        return new Promise((n, r)=>et(this, void 0, void 0, function*() {\n                var o;\n                try {\n                    if (null === (o = this.connector) || void 0 === o ? void 0 : o.connected) try {\n                        yield this.connector.killSession();\n                    } catch (t) {}\n                    const { isWebWalletAvailable: i, bridgeURL: s, webWalletURL: a, shouldDisplayNewBadge: l, shouldUseSound: u, promoteMobile: c } = yield Nt(), h = Yt({\n                        resolve: n,\n                        reject: r,\n                        webWalletURL: a,\n                        chainId: this.chainId,\n                        isCompactMode: this.compactMode\n                    });\n                    i && (window.onWebWalletConnect = h), this.connector = new _walletconnect_client__WEBPACK_IMPORTED_MODULE_0__({\n                        bridge: this.bridge || s || \"https://bridge.walletconnect.org\",\n                        qrcodeModal: kt({\n                            isWebWalletAvailable: i,\n                            shouldDisplayNewBadge: l,\n                            shouldUseSound: u,\n                            compactMode: this.compactMode,\n                            promoteMobile: c,\n                            singleAccount: this.singleAccount,\n                            selectedAccount: null == e ? void 0 : e.selectedAccount\n                        })\n                    }), yield this.connector.createSession({\n                        chainId: this.chainId || 4160\n                    }), function(t, e) {\n                        var n, r, o, i;\n                        const s = document.getElementById(t), a = null === (r = null === (n = null == s ? void 0 : s.querySelector(t.replace(\"-wrapper\", \"\"))) || void 0 === n ? void 0 : n.shadowRoot) || void 0 === r ? void 0 : r.querySelector(`.${dt}`), l = null === (i = null === (o = null == a ? void 0 : a.querySelector(\"pera-wallet-modal-header\")) || void 0 === o ? void 0 : o.shadowRoot) || void 0 === i ? void 0 : i.getElementById(\"pera-wallet-modal-header-close-button\");\n                        null == l || l.addEventListener(\"click\", ()=>{\n                            e(), vt(t);\n                        });\n                    }(ut, ()=>r(new nt({\n                            type: \"CONNECT_MODAL_CLOSED\"\n                        }, \"Connect modal is closed by user\"))), this.connector.on(\"connect\", (t, e)=>{\n                        var o, i;\n                        t && r(t), n((null === (o = this.connector) || void 0 === o ? void 0 : o.accounts) || []), At((null === (i = this.connector) || void 0 === i ? void 0 : i.accounts) || []);\n                    });\n                } catch (t) {\n                    console.log(t), r(new nt({\n                        type: \"SESSION_CONNECT\",\n                        detail: t\n                    }, t.message || \"There was an error while connecting to Pera Wallet\"));\n                }\n            }));\n    }\n    reconnectSession() {\n        return new Promise((e, n)=>et(this, void 0, void 0, function*() {\n                var r, o;\n                try {\n                    const i = Et();\n                    if (!i) return void e([]);\n                    if (\"pera-wallet-web\" === (null == i ? void 0 : i.type)) {\n                        const { isWebWalletAvailable: t } = yield Nt();\n                        t ? e(i.accounts || []) : n(new nt({\n                            type: \"SESSION_RECONNECT\",\n                            detail: \"Pera Web is not available\"\n                        }, \"Pera Web is not available\"));\n                    }\n                    this.connector && e(this.connector.accounts || []), this.bridge = (null === (r = function() {\n                        var t;\n                        const e = null === (t = bt()) || void 0 === t ? void 0 : t.getItem(mt.WALLETCONNECT);\n                        return e ? JSON.parse(e) : null;\n                    }()) || void 0 === r ? void 0 : r.bridge) || \"\", this.bridge && (this.connector = new _walletconnect_client__WEBPACK_IMPORTED_MODULE_0__({\n                        bridge: this.bridge\n                    }), e((null === (o = this.connector) || void 0 === o ? void 0 : o.accounts) || [])), this.isConnected || e([]);\n                } catch (t) {\n                    yield this.disconnect(), n(new nt({\n                        type: \"SESSION_RECONNECT\",\n                        detail: t\n                    }, t.message || \"There was an error while reconnecting to Pera Wallet\"));\n                }\n            }));\n    }\n    disconnect() {\n        var t;\n        return et(this, void 0, void 0, function*() {\n            let e;\n            this.isConnected && \"mobile\" === this.platform && (e = null === (t = this.connector) || void 0 === t ? void 0 : t.killSession(), null == e || e.then(()=>{\n                this.connector = null;\n            })), yield Tt();\n        });\n    }\n    signTransactionWithMobile(t) {\n        return et(this, void 0, void 0, function*() {\n            const e = It(\"algo_signTxn\", [\n                t\n            ]);\n            try {\n                try {\n                    const { silent: t } = yield Nt(), n = (yield this.connector.sendCustomRequest(e, {\n                        forcePushNotification: !t\n                    })).filter(Boolean);\n                    return \"string\" == typeof n[0] ? n.map(Ct) : n.map((t)=>Uint8Array.from(t));\n                } catch (t) {\n                    return yield Promise.reject(new nt({\n                        type: \"SIGN_TRANSACTIONS\",\n                        detail: t\n                    }, t.message || \"Failed to sign transaction\"));\n                }\n            } finally{\n                vt(ct), vt(ht);\n            }\n        });\n    }\n    signTransactionWithWeb(t, e) {\n        return new Promise((n, r)=>xt({\n                signTxnRequestParams: t,\n                webWalletURL: e,\n                method: \"SIGN_TXN\",\n                resolve: n,\n                reject: r\n            }));\n    }\n    signDataWithMobile({ data: t, signer: e, chainId: n }) {\n        return et(this, void 0, void 0, function*() {\n            const r = It(\"algo_signData\", t.map((t)=>Object.assign(Object.assign({}, t), {\n                    signer: e,\n                    chainId: n\n                })));\n            try {\n                try {\n                    const { silent: t } = yield Nt(), e = (yield this.connector.sendCustomRequest(r, {\n                        forcePushNotification: !t\n                    })).filter(Boolean);\n                    return \"string\" == typeof e[0] ? e.map(Ct) : e.map((t)=>Uint8Array.from(t));\n                } catch (t) {\n                    return yield Promise.reject(new nt({\n                        type: \"SIGN_TRANSACTIONS\",\n                        detail: t\n                    }, t.message || \"Failed to sign transaction\"));\n                }\n            } finally{\n                vt(ct), vt(ht);\n            }\n        });\n    }\n    signDataWithWeb({ data: t, signer: e, chainId: n, webWalletURL: r }) {\n        return new Promise((o, i)=>xt({\n                method: \"SIGN_DATA\",\n                signTxnRequestParams: t,\n                signer: e,\n                chainId: n,\n                webWalletURL: r,\n                resolve: o,\n                reject: i\n            }));\n    }\n    checkIsPeraDiscoverBrowser() {\n        return window.navigator.userAgent.includes(\"pera\");\n    }\n    signTransaction(t, n) {\n        return et(this, void 0, void 0, function*() {\n            if (\"mobile\" === this.platform && (Mt() ? gt() : !Mt() && this.shouldShowSignTxnToast && wt(), !this.connector)) throw new Error(\"PeraWalletConnect was not initialized correctly.\");\n            const r = t.flatMap((t)=>t.map((t)=>(function(t, n) {\n                        let r;\n                        n && !(t.signers || []).includes(n) && (r = []);\n                        const o = {\n                            txn: (i = t.txn, Buffer.from(algosdk__WEBPACK_IMPORTED_MODULE_1__[\"default\"].encodeUnsignedTransaction(i)).toString(\"base64\"))\n                        };\n                        var i;\n                        return Array.isArray(r) && (o.signers = r), t.authAddr && (o.authAddr = t.authAddr), t.message && (o.message = t.message), t.msig && (o.msig = t.msig), o;\n                    })(t, n)));\n            if (\"web\" === this.platform) {\n                const { webWalletURL: t } = yield Nt();\n                return this.signTransactionWithWeb(r, t);\n            }\n            return this.signTransactionWithMobile(r);\n        });\n    }\n    signData(t, e) {\n        return et(this, void 0, void 0, function*() {\n            const n = this.chainId || 4160;\n            if (\"mobile\" === this.platform && (Mt() ? gt() : !Mt() && this.shouldShowSignTxnToast && wt(), !this.connector)) throw new Error(\"PeraWalletConnect was not initialized correctly.\");\n            if (\"web\" === this.platform) {\n                const { webWalletURL: r } = yield Nt();\n                return this.signDataWithWeb({\n                    data: t,\n                    signer: e,\n                    chainId: n,\n                    webWalletURL: r\n                });\n            }\n            const r = t.map((t)=>Object.assign(Object.assign({}, t), {\n                    data: Buffer.from(t.data).toString(\"base64\")\n                }));\n            return this.signDataWithMobile({\n                data: r,\n                signer: e,\n                chainId: n\n            });\n        });\n    }\n}\n false && (0);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@perawallet/connect/dist/index-87e811df.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@perawallet/connect/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@perawallet/connect/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PeraWalletConnect: () => (/* reexport safe */ _index_87e811df_js__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   closePeraWalletSignTxnToast: () => (/* reexport safe */ _index_87e811df_js__WEBPACK_IMPORTED_MODULE_0__.l)\n/* harmony export */ });\n/* harmony import */ var _index_87e811df_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-87e811df.js */ \"(ssr)/./node_modules/@perawallet/connect/dist/index-87e811df.js\");\n/* harmony import */ var _walletconnect_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/client */ \"(ssr)/./node_modules/@walletconnect/client/dist/cjs/index.js\");\n/* harmony import */ var algosdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! algosdk */ \"(ssr)/./node_modules/algosdk/dist/esm/index.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/bowser/src/bowser.js\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBlcmF3YWxsZXQvY29ubmVjdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF5RjtBQUE4QjtBQUFnQjtBQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VsdHJhLWFtbS1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AcGVyYXdhbGxldC9jb25uZWN0L2Rpc3QvaW5kZXguanM/NmMyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnR7ayBhcyBQZXJhV2FsbGV0Q29ubmVjdCxsIGFzIGNsb3NlUGVyYVdhbGxldFNpZ25UeG5Ub2FzdH1mcm9tXCIuL2luZGV4LTg3ZTgxMWRmLmpzXCI7aW1wb3J0XCJAd2FsbGV0Y29ubmVjdC9jbGllbnRcIjtpbXBvcnRcImFsZ29zZGtcIjtpbXBvcnRcImJvd3NlclwiO1xuIl0sIm5hbWVzIjpbImsiLCJQZXJhV2FsbGV0Q29ubmVjdCIsImwiLCJjbG9zZVBlcmFXYWxsZXRTaWduVHhuVG9hc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@perawallet/connect/dist/index.js\n");

/***/ })

};
;