"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./providers/ContractProvider.tsx":
/*!****************************************!*\
  !*** ./providers/ContractProvider.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContractProvider: function() { return /* binding */ ContractProvider; },\n/* harmony export */   useContract: function() { return /* binding */ useContract; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var algosdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! algosdk */ \"(app-pages-browser)/./node_modules/algosdk/dist/esm/index.js\");\n/* harmony import */ var _WalletProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WalletProvider */ \"(app-pages-browser)/./providers/WalletProvider.tsx\");\n/* harmony import */ var _utils_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/utils/config */ \"(app-pages-browser)/./utils/config.ts\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n/* __next_internal_client_entry_do_not_use__ useContract,ContractProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nconst ContractContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useContract = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ContractContext);\n    if (!context) {\n        throw new Error(\"useContract must be used within a ContractProvider\");\n    }\n    return context;\n};\n_s(useContract, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst ContractProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const { wallet, algodClient, peraWallet } = (0,_WalletProvider__WEBPACK_IMPORTED_MODULE_3__.useWallet)();\n    const [poolState, setPoolState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const contractConfig = (0,_utils_config__WEBPACK_IMPORTED_MODULE_4__.getContractConfig)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (algodClient) {\n            refreshPoolState();\n        }\n    }, [\n        algodClient\n    ]);\n    const refreshPoolState = async ()=>{\n        if (!algodClient) return;\n        setIsLoading(true);\n        try {\n            const appInfo = await algodClient.getApplicationByID(contractConfig.poolAppId).do();\n            const globalState = appInfo.params.globalState;\n            // Parse global state to extract pool information\n            const poolData = {\n                appId: contractConfig.poolAppId,\n                assetX: contractConfig.assetXId,\n                assetY: contractConfig.assetYId,\n                currentPrice: parseGlobalState(globalState || [], \"current_price\") || 0,\n                totalLiquidity: parseGlobalState(globalState || [], \"total_liquidity\") || 0,\n                feeRate: parseGlobalState(globalState || [], \"current_fee_rate\") || 30,\n                ranges: [\n                    {\n                        id: 1,\n                        lower: parseGlobalState(globalState || [], \"range1_lower\") || 0,\n                        upper: parseGlobalState(globalState || [], \"range1_upper\") || 0,\n                        liquidity: parseGlobalState(globalState || [], \"range1_liquidity\") || 0,\n                        isActive: (parseGlobalState(globalState || [], \"range1_liquidity\") || 0) > 0\n                    },\n                    {\n                        id: 2,\n                        lower: parseGlobalState(globalState, \"range2_lower\") || 0,\n                        upper: parseGlobalState(globalState, \"range2_upper\") || 0,\n                        liquidity: parseGlobalState(globalState, \"range2_liquidity\") || 0,\n                        isActive: (parseGlobalState(globalState, \"range2_liquidity\") || 0) > 0\n                    },\n                    {\n                        id: 3,\n                        lower: parseGlobalState(globalState, \"range3_lower\") || 0,\n                        upper: parseGlobalState(globalState, \"range3_upper\") || 0,\n                        liquidity: parseGlobalState(globalState, \"range3_liquidity\") || 0,\n                        isActive: (parseGlobalState(globalState, \"range3_liquidity\") || 0) > 0\n                    }\n                ]\n            };\n            setPoolState(poolData);\n        } catch (error) {\n            console.error(\"Error fetching pool state:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const parseGlobalState = (globalState, key)=>{\n        const item = globalState.find((item)=>Buffer.from(item.key, \"base64\").toString() === key);\n        return item ? item.value.uint : null;\n    };\n    const executeSwap = async (params)=>{\n        if (!wallet.isConnected || !wallet.address || !algodClient || !peraWallet) {\n            return {\n                success: false,\n                error: \"Wallet not connected\"\n            };\n        }\n        try {\n            const suggestedParams = await algodClient.getTransactionParams().do();\n            // Create application call transaction for swap\n            const appCallTxn = algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].makeApplicationCallTxnFromObject({\n                from: wallet.address,\n                appIndex: contractConfig.poolAppId,\n                onComplete: algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].OnApplicationComplete.NoOpOC,\n                appArgs: [\n                    new Uint8Array(Buffer.from(\"swap\")),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.assetIn),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.assetOut),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.amountIn),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.minAmountOut),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.deadline)\n                ],\n                foreignAssets: [\n                    params.assetIn,\n                    params.assetOut\n                ].filter((id)=>id !== 0),\n                suggestedParams\n            });\n            // Sign and send transaction\n            const signedTxns = await peraWallet.signTransaction([\n                appCallTxn\n            ]);\n            const { txId } = await algodClient.sendRawTransaction(signedTxns).do();\n            // Wait for confirmation\n            await algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].waitForConfirmation(algodClient, txId, 4);\n            // Refresh pool state and wallet balance\n            await refreshPoolState();\n            return {\n                success: true,\n                txId\n            };\n        } catch (error) {\n            console.error(\"Swap error:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    };\n    const addLiquidity = async (params)=>{\n        if (!wallet.isConnected || !wallet.address || !algodClient || !peraWallet) {\n            return {\n                success: false,\n                error: \"Wallet not connected\"\n            };\n        }\n        try {\n            const suggestedParams = await algodClient.getTransactionParams().do();\n            const appCallTxn = algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].makeApplicationCallTxnFromObject({\n                from: wallet.address,\n                appIndex: contractConfig.poolAppId,\n                onComplete: algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].OnApplicationComplete.NoOpOC,\n                appArgs: [\n                    new Uint8Array(Buffer.from(\"add_liquidity\")),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.assetX),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.assetY),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.amountXDesired),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.amountYDesired),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.amountXMin),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.amountYMin),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.rangeId),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(params.deadline)\n                ],\n                foreignAssets: [\n                    params.assetX,\n                    params.assetY\n                ].filter((id)=>id !== 0),\n                suggestedParams\n            });\n            const signedTxns = await peraWallet.signTransaction([\n                appCallTxn\n            ]);\n            const { txId } = await algodClient.sendRawTransaction(signedTxns).do();\n            await algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].waitForConfirmation(algodClient, txId, 4);\n            await refreshPoolState();\n            return {\n                success: true,\n                txId\n            };\n        } catch (error) {\n            console.error(\"Add liquidity error:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    };\n    const removeLiquidity = async (lpTokens, rangeId)=>{\n        if (!wallet.isConnected || !wallet.address || !algodClient || !peraWallet) {\n            return {\n                success: false,\n                error: \"Wallet not connected\"\n            };\n        }\n        try {\n            const suggestedParams = await algodClient.getTransactionParams().do();\n            const appCallTxn = algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].makeApplicationCallTxnFromObject({\n                from: wallet.address,\n                appIndex: contractConfig.poolAppId,\n                onComplete: algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].OnApplicationComplete.NoOpOC,\n                appArgs: [\n                    new Uint8Array(Buffer.from(\"remove_liquidity\")),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(lpTokens),\n                    algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encodeUint64(rangeId)\n                ],\n                suggestedParams\n            });\n            const signedTxns = await peraWallet.signTransaction([\n                appCallTxn\n            ]);\n            const { txId } = await algodClient.sendRawTransaction(signedTxns).do();\n            await algosdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].waitForConfirmation(algodClient, txId, 4);\n            await refreshPoolState();\n            return {\n                success: true,\n                txId\n            };\n        } catch (error) {\n            console.error(\"Remove liquidity error:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ContractContext.Provider, {\n        value: {\n            poolState,\n            isLoading,\n            refreshPoolState,\n            executeSwap,\n            addLiquidity,\n            removeLiquidity\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/baturalpguvenc/Documents/GitHub/seltra-amm/nextjs-frontend/providers/ContractProvider.tsx\",\n        lineNumber: 217,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(ContractProvider, \"XoVYGDtDUqjjGRklmxaoqDddY54=\", false, function() {\n    return [\n        _WalletProvider__WEBPACK_IMPORTED_MODULE_3__.useWallet\n    ];\n});\n_c = ContractProvider;\nvar _c;\n$RefreshReg$(_c, \"ContractProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3Byb3ZpZGVycy9Db250cmFjdFByb3ZpZGVyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUV5RjtBQUMzRDtBQUNlO0FBRU07QUFXbkQsTUFBTVEsZ0NBQWtCUCxvREFBYUEsQ0FBa0NRO0FBRWhFLE1BQU1DLGNBQWM7O0lBQ3pCLE1BQU1DLFVBQVVULGlEQUFVQSxDQUFDTTtJQUMzQixJQUFJLENBQUNHLFNBQVM7UUFDWixNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFDQSxPQUFPRDtBQUNULEVBQUU7R0FOV0Q7QUFZTixNQUFNRyxtQkFBb0Q7UUFBQyxFQUFFQyxRQUFRLEVBQUU7O0lBQzVFLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLFVBQVUsRUFBRSxHQUFHWCwwREFBU0E7SUFDckQsTUFBTSxDQUFDWSxXQUFXQyxhQUFhLEdBQUdoQiwrQ0FBUUEsQ0FBbUI7SUFDN0QsTUFBTSxDQUFDaUIsV0FBV0MsYUFBYSxHQUFHbEIsK0NBQVFBLENBQUM7SUFFM0MsTUFBTW1CLGlCQUFpQmYsZ0VBQWlCQTtJQUV4Q0gsZ0RBQVNBLENBQUM7UUFDUixJQUFJWSxhQUFhO1lBQ2ZPO1FBQ0Y7SUFDRixHQUFHO1FBQUNQO0tBQVk7SUFFaEIsTUFBTU8sbUJBQW1CO1FBQ3ZCLElBQUksQ0FBQ1AsYUFBYTtRQUVsQkssYUFBYTtRQUNiLElBQUk7WUFDRixNQUFNRyxVQUFVLE1BQU1SLFlBQVlTLGtCQUFrQixDQUFDSCxlQUFlSSxTQUFTLEVBQUVDLEVBQUU7WUFDakYsTUFBTUMsY0FBY0osUUFBUUssTUFBTSxDQUFDRCxXQUFXO1lBRTlDLGlEQUFpRDtZQUNqRCxNQUFNRSxXQUFzQjtnQkFDMUJDLE9BQU9ULGVBQWVJLFNBQVM7Z0JBQy9CTSxRQUFRVixlQUFlVyxRQUFRO2dCQUMvQkMsUUFBUVosZUFBZWEsUUFBUTtnQkFDL0JDLGNBQWNDLGlCQUFpQlQsZUFBZSxFQUFFLEVBQUUsb0JBQW9CO2dCQUN0RVUs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O2lCQUN0QjtnQkFDRDdCO1lBQ0Y7WUFFQSxNQUFNa0IsYUFBYSxNQUFNN0QsV0FBVzhELGVBQWUsQ0FBQztnQkFBQ2pCO2FBQVc7WUFDaEUsTUFBTSxFQUFFa0IsSUFBSSxFQUFFLEdBQUcsTUFBTWhFLFlBQVlpRSxrQkFBa0IsQ0FBQ0gsWUFBWW5ELEVBQUU7WUFFcEUsTUFBTXRCLG1FQUEyQixDQUFDVyxhQUFhZ0UsTUFBTTtZQUNyRCxNQUFNekQ7WUFFTixPQUFPO2dCQUFFb0MsU0FBUztnQkFBTXFCO1lBQUs7UUFDL0IsRUFBRSxPQUFPbEMsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsMkJBQTJCQTtZQUN6QyxPQUFPO2dCQUFFYSxTQUFTO2dCQUFPYixPQUFPQSxpQkFBaUJsQyxRQUFRa0MsTUFBTXFDLE9BQU8sR0FBRztZQUFnQjtRQUMzRjtJQUNGO0lBRUEscUJBQ0UsOERBQUMzRSxnQkFBZ0JvRixRQUFRO1FBQUN0QyxPQUFPO1lBQy9CcEM7WUFDQUU7WUFDQUc7WUFDQWlDO1lBQ0E0QjtZQUNBTTtRQUNGO2tCQUNHNUU7Ozs7OztBQUdQLEVBQUU7SUFwTVdEOztRQUNpQ1Asc0RBQVNBOzs7S0FEMUNPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3Byb3ZpZGVycy9Db250cmFjdFByb3ZpZGVyLnRzeD9lN2M2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcblxuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBhbGdvc2RrIGZyb20gJ2FsZ29zZGsnO1xuaW1wb3J0IHsgdXNlV2FsbGV0IH0gZnJvbSAnLi9XYWxsZXRQcm92aWRlcic7XG5pbXBvcnQgeyBQb29sU3RhdGUsIFN3YXBQYXJhbXMsIExpcXVpZGl0eVBhcmFtcywgVHJhbnNhY3Rpb25SZXN1bHQgfSBmcm9tICdAL3R5cGVzJztcbmltcG9ydCB7IGdldENvbnRyYWN0Q29uZmlnIH0gZnJvbSAnQC91dGlscy9jb25maWcnO1xuXG5pbnRlcmZhY2UgQ29udHJhY3RDb250ZXh0VHlwZSB7XG4gIHBvb2xTdGF0ZTogUG9vbFN0YXRlIHwgbnVsbDtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICByZWZyZXNoUG9vbFN0YXRlOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBleGVjdXRlU3dhcDogKHBhcmFtczogU3dhcFBhcmFtcykgPT4gUHJvbWlzZTxUcmFuc2FjdGlvblJlc3VsdD47XG4gIGFkZExpcXVpZGl0eTogKHBhcmFtczogTGlxdWlkaXR5UGFyYW1zKSA9PiBQcm9taXNlPFRyYW5zYWN0aW9uUmVzdWx0PjtcbiAgcmVtb3ZlTGlxdWlkaXR5OiAobHBUb2tlbnM6IG51bWJlciwgcmFuZ2VJZDogbnVtYmVyKSA9PiBQcm9taXNlPFRyYW5zYWN0aW9uUmVzdWx0Pjtcbn1cblxuY29uc3QgQ29udHJhY3RDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxDb250cmFjdENvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG5leHBvcnQgY29uc3QgdXNlQ29udHJhY3QgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KENvbnRyYWN0Q29udGV4dCk7XG4gIGlmICghY29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXNlQ29udHJhY3QgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIENvbnRyYWN0UHJvdmlkZXInKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn07XG5cbmludGVyZmFjZSBDb250cmFjdFByb3ZpZGVyUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xufVxuXG5leHBvcnQgY29uc3QgQ29udHJhY3RQcm92aWRlcjogUmVhY3QuRkM8Q29udHJhY3RQcm92aWRlclByb3BzPiA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgeyB3YWxsZXQsIGFsZ29kQ2xpZW50LCBwZXJhV2FsbGV0IH0gPSB1c2VXYWxsZXQoKTtcbiAgY29uc3QgW3Bvb2xTdGF0ZSwgc2V0UG9vbFN0YXRlXSA9IHVzZVN0YXRlPFBvb2xTdGF0ZSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGNvbnRyYWN0Q29uZmlnID0gZ2V0Q29udHJhY3RDb25maWcoKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhbGdvZENsaWVudCkge1xuICAgICAgcmVmcmVzaFBvb2xTdGF0ZSgpO1xuICAgIH1cbiAgfSwgW2FsZ29kQ2xpZW50XSk7XG5cbiAgY29uc3QgcmVmcmVzaFBvb2xTdGF0ZSA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoIWFsZ29kQ2xpZW50KSByZXR1cm47XG5cbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFwcEluZm8gPSBhd2FpdCBhbGdvZENsaWVudC5nZXRBcHBsaWNhdGlvbkJ5SUQoY29udHJhY3RDb25maWcucG9vbEFwcElkKS5kbygpO1xuICAgICAgY29uc3QgZ2xvYmFsU3RhdGUgPSBhcHBJbmZvLnBhcmFtcy5nbG9iYWxTdGF0ZTtcblxuICAgICAgLy8gUGFyc2UgZ2xvYmFsIHN0YXRlIHRvIGV4dHJhY3QgcG9vbCBpbmZvcm1hdGlvblxuICAgICAgY29uc3QgcG9vbERhdGE6IFBvb2xTdGF0ZSA9IHtcbiAgICAgICAgYXBwSWQ6IGNvbnRyYWN0Q29uZmlnLnBvb2xBcHBJZCxcbiAgICAgICAgYXNzZXRYOiBjb250cmFjdENvbmZpZy5hc3NldFhJZCxcbiAgICAgICAgYXNzZXRZOiBjb250cmFjdENvbmZpZy5hc3NldFlJZCxcbiAgICAgICAgY3VycmVudFByaWNlOiBwYXJzZUdsb2JhbFN0YXRlKGdsb2JhbFN0YXRlIHx8IFtdLCAnY3VycmVudF9wcmljZScpIHx8IDAsXG4gICAgICAgIHRvdGFsTGlxdWlkaXR5OiBwYXJzZUdsb2JhbFN0YXRlKGdsb2JhbFN0YXRlIHx8IFtdLCAndG90YWxfbGlxdWlkaXR5JykgfHwgMCxcbiAgICAgICAgZmVlUmF0ZTogcGFyc2VHbG9iYWxTdGF0ZShnbG9iYWxTdGF0ZSB8fCBbXSwgJ2N1cnJlbnRfZmVlX3JhdGUnKSB8fCAzMCxcbiAgICAgICAgcmFuZ2VzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgICBsb3dlcjogcGFyc2VHbG9iYWxTdGF0ZShnbG9iYWxTdGF0ZSB8fCBbXSwgJ3JhbmdlMV9sb3dlcicpIHx8IDAsXG4gICAgICAgICAgICB1cHBlcjogcGFyc2VHbG9iYWxTdGF0ZShnbG9iYWxTdGF0ZSB8fCBbXSwgJ3JhbmdlMV91cHBlcicpIHx8IDAsXG4gICAgICAgICAgICBsaXF1aWRpdHk6IHBhcnNlR2xvYmFsU3RhdGUoZ2xvYmFsU3RhdGUgfHwgW10sICdyYW5nZTFfbGlxdWlkaXR5JykgfHwgMCxcbiAgICAgICAgICAgIGlzQWN0aXZlOiAocGFyc2VHbG9iYWxTdGF0ZShnbG9iYWxTdGF0ZSB8fCBbXSwgJ3JhbmdlMV9saXF1aWRpdHknKSB8fCAwKSA+IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAyLFxuICAgICAgICAgICAgbG93ZXI6IHBhcnNlR2xvYmFsU3RhdGUoZ2xvYmFsU3RhdGUsICdyYW5nZTJfbG93ZXInKSB8fCAwLFxuICAgICAgICAgICAgdXBwZXI6IHBhcnNlR2xvYmFsU3RhdGUoZ2xvYmFsU3RhdGUsICdyYW5nZTJfdXBwZXInKSB8fCAwLFxuICAgICAgICAgICAgbGlxdWlkaXR5OiBwYXJzZUdsb2JhbFN0YXRlKGdsb2JhbFN0YXRlLCAncmFuZ2UyX2xpcXVpZGl0eScpIHx8IDAsXG4gICAgICAgICAgICBpc0FjdGl2ZTogKHBhcnNlR2xvYmFsU3RhdGUoZ2xvYmFsU3RhdGUsICdyYW5nZTJfbGlxdWlkaXR5JykgfHwgMCkgPiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogMyxcbiAgICAgICAgICAgIGxvd2VyOiBwYXJzZUdsb2JhbFN0YXRlKGdsb2JhbFN0YXRlLCAncmFuZ2UzX2xvd2VyJykgfHwgMCxcbiAgICAgICAgICAgIHVwcGVyOiBwYXJzZUdsb2JhbFN0YXRlKGdsb2JhbFN0YXRlLCAncmFuZ2UzX3VwcGVyJykgfHwgMCxcbiAgICAgICAgICAgIGxpcXVpZGl0eTogcGFyc2VHbG9iYWxTdGF0ZShnbG9iYWxTdGF0ZSwgJ3JhbmdlM19saXF1aWRpdHknKSB8fCAwLFxuICAgICAgICAgICAgaXNBY3RpdmU6IChwYXJzZUdsb2JhbFN0YXRlKGdsb2JhbFN0YXRlLCAncmFuZ2UzX2xpcXVpZGl0eScpIHx8IDApID4gMFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfTtcblxuICAgICAgc2V0UG9vbFN0YXRlKHBvb2xEYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcG9vbCBzdGF0ZTonLCBlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHBhcnNlR2xvYmFsU3RhdGUgPSAoZ2xvYmFsU3RhdGU6IGFueVtdLCBrZXk6IHN0cmluZyk6IG51bWJlciB8IG51bGwgPT4ge1xuICAgIGNvbnN0IGl0ZW0gPSBnbG9iYWxTdGF0ZS5maW5kKGl0ZW0gPT4gXG4gICAgICBCdWZmZXIuZnJvbShpdGVtLmtleSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCkgPT09IGtleVxuICAgICk7XG4gICAgcmV0dXJuIGl0ZW0gPyBpdGVtLnZhbHVlLnVpbnQgOiBudWxsO1xuICB9O1xuXG4gIGNvbnN0IGV4ZWN1dGVTd2FwID0gYXN5bmMgKHBhcmFtczogU3dhcFBhcmFtcyk6IFByb21pc2U8VHJhbnNhY3Rpb25SZXN1bHQ+ID0+IHtcbiAgICBpZiAoIXdhbGxldC5pc0Nvbm5lY3RlZCB8fCAhd2FsbGV0LmFkZHJlc3MgfHwgIWFsZ29kQ2xpZW50IHx8ICFwZXJhV2FsbGV0KSB7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdXYWxsZXQgbm90IGNvbm5lY3RlZCcgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3VnZ2VzdGVkUGFyYW1zID0gYXdhaXQgYWxnb2RDbGllbnQuZ2V0VHJhbnNhY3Rpb25QYXJhbXMoKS5kbygpO1xuICAgICAgXG4gICAgICAvLyBDcmVhdGUgYXBwbGljYXRpb24gY2FsbCB0cmFuc2FjdGlvbiBmb3Igc3dhcFxuICAgICAgY29uc3QgYXBwQ2FsbFR4biA9IGFsZ29zZGsubWFrZUFwcGxpY2F0aW9uQ2FsbFR4bkZyb21PYmplY3Qoe1xuICAgICAgICBmcm9tOiB3YWxsZXQuYWRkcmVzcyxcbiAgICAgICAgYXBwSW5kZXg6IGNvbnRyYWN0Q29uZmlnLnBvb2xBcHBJZCxcbiAgICAgICAgb25Db21wbGV0ZTogYWxnb3Nkay5PbkFwcGxpY2F0aW9uQ29tcGxldGUuTm9PcE9DLFxuICAgICAgICBhcHBBcmdzOiBbXG4gICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmZyb20oJ3N3YXAnKSksXG4gICAgICAgICAgYWxnb3Nkay5lbmNvZGVVaW50NjQocGFyYW1zLmFzc2V0SW4pLFxuICAgICAgICAgIGFsZ29zZGsuZW5jb2RlVWludDY0KHBhcmFtcy5hc3NldE91dCksXG4gICAgICAgICAgYWxnb3Nkay5lbmNvZGVVaW50NjQocGFyYW1zLmFtb3VudEluKSxcbiAgICAgICAgICBhbGdvc2RrLmVuY29kZVVpbnQ2NChwYXJhbXMubWluQW1vdW50T3V0KSxcbiAgICAgICAgICBhbGdvc2RrLmVuY29kZVVpbnQ2NChwYXJhbXMuZGVhZGxpbmUpXG4gICAgICAgIF0sXG4gICAgICAgIGZvcmVpZ25Bc3NldHM6IFtwYXJhbXMuYXNzZXRJbiwgcGFyYW1zLmFzc2V0T3V0XS5maWx0ZXIoaWQgPT4gaWQgIT09IDApLFxuICAgICAgICBzdWdnZXN0ZWRQYXJhbXNcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTaWduIGFuZCBzZW5kIHRyYW5zYWN0aW9uXG4gICAgICBjb25zdCBzaWduZWRUeG5zID0gYXdhaXQgcGVyYVdhbGxldC5zaWduVHJhbnNhY3Rpb24oW2FwcENhbGxUeG5dKTtcbiAgICAgIGNvbnN0IHsgdHhJZCB9ID0gYXdhaXQgYWxnb2RDbGllbnQuc2VuZFJhd1RyYW5zYWN0aW9uKHNpZ25lZFR4bnMpLmRvKCk7XG4gICAgICBcbiAgICAgIC8vIFdhaXQgZm9yIGNvbmZpcm1hdGlvblxuICAgICAgYXdhaXQgYWxnb3Nkay53YWl0Rm9yQ29uZmlybWF0aW9uKGFsZ29kQ2xpZW50LCB0eElkLCA0KTtcbiAgICAgIFxuICAgICAgLy8gUmVmcmVzaCBwb29sIHN0YXRlIGFuZCB3YWxsZXQgYmFsYW5jZVxuICAgICAgYXdhaXQgcmVmcmVzaFBvb2xTdGF0ZSgpO1xuICAgICAgXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCB0eElkIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1N3YXAgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyB9O1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhZGRMaXF1aWRpdHkgPSBhc3luYyAocGFyYW1zOiBMaXF1aWRpdHlQYXJhbXMpOiBQcm9taXNlPFRyYW5zYWN0aW9uUmVzdWx0PiA9PiB7XG4gICAgaWYgKCF3YWxsZXQuaXNDb25uZWN0ZWQgfHwgIXdhbGxldC5hZGRyZXNzIHx8ICFhbGdvZENsaWVudCB8fCAhcGVyYVdhbGxldCkge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnV2FsbGV0IG5vdCBjb25uZWN0ZWQnIH07XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN1Z2dlc3RlZFBhcmFtcyA9IGF3YWl0IGFsZ29kQ2xpZW50LmdldFRyYW5zYWN0aW9uUGFyYW1zKCkuZG8oKTtcbiAgICAgIFxuICAgICAgY29uc3QgYXBwQ2FsbFR4biA9IGFsZ29zZGsubWFrZUFwcGxpY2F0aW9uQ2FsbFR4bkZyb21PYmplY3Qoe1xuICAgICAgICBmcm9tOiB3YWxsZXQuYWRkcmVzcyxcbiAgICAgICAgYXBwSW5kZXg6IGNvbnRyYWN0Q29uZmlnLnBvb2xBcHBJZCxcbiAgICAgICAgb25Db21wbGV0ZTogYWxnb3Nkay5PbkFwcGxpY2F0aW9uQ29tcGxldGUuTm9PcE9DLFxuICAgICAgICBhcHBBcmdzOiBbXG4gICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmZyb20oJ2FkZF9saXF1aWRpdHknKSksXG4gICAgICAgICAgYWxnb3Nkay5lbmNvZGVVaW50NjQocGFyYW1zLmFzc2V0WCksXG4gICAgICAgICAgYWxnb3Nkay5lbmNvZGVVaW50NjQocGFyYW1zLmFzc2V0WSksXG4gICAgICAgICAgYWxnb3Nkay5lbmNvZGVVaW50NjQocGFyYW1zLmFtb3VudFhEZXNpcmVkKSxcbiAgICAgICAgICBhbGdvc2RrLmVuY29kZVVpbnQ2NChwYXJhbXMuYW1vdW50WURlc2lyZWQpLFxuICAgICAgICAgIGFsZ29zZGsuZW5jb2RlVWludDY0KHBhcmFtcy5hbW91bnRYTWluKSxcbiAgICAgICAgICBhbGdvc2RrLmVuY29kZVVpbnQ2NChwYXJhbXMuYW1vdW50WU1pbiksXG4gICAgICAgICAgYWxnb3Nkay5lbmNvZGVVaW50NjQocGFyYW1zLnJhbmdlSWQpLFxuICAgICAgICAgIGFsZ29zZGsuZW5jb2RlVWludDY0KHBhcmFtcy5kZWFkbGluZSlcbiAgICAgICAgXSxcbiAgICAgICAgZm9yZWlnbkFzc2V0czogW3BhcmFtcy5hc3NldFgsIHBhcmFtcy5hc3NldFldLmZpbHRlcihpZCA9PiBpZCAhPT0gMCksXG4gICAgICAgIHN1Z2dlc3RlZFBhcmFtc1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHNpZ25lZFR4bnMgPSBhd2FpdCBwZXJhV2FsbGV0LnNpZ25UcmFuc2FjdGlvbihbYXBwQ2FsbFR4bl0pO1xuICAgICAgY29uc3QgeyB0eElkIH0gPSBhd2FpdCBhbGdvZENsaWVudC5zZW5kUmF3VHJhbnNhY3Rpb24oc2lnbmVkVHhucykuZG8oKTtcbiAgICAgIFxuICAgICAgYXdhaXQgYWxnb3Nkay53YWl0Rm9yQ29uZmlybWF0aW9uKGFsZ29kQ2xpZW50LCB0eElkLCA0KTtcbiAgICAgIGF3YWl0IHJlZnJlc2hQb29sU3RhdGUoKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgdHhJZCB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdBZGQgbGlxdWlkaXR5IGVycm9yOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicgfTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcmVtb3ZlTGlxdWlkaXR5ID0gYXN5bmMgKGxwVG9rZW5zOiBudW1iZXIsIHJhbmdlSWQ6IG51bWJlcik6IFByb21pc2U8VHJhbnNhY3Rpb25SZXN1bHQ+ID0+IHtcbiAgICBpZiAoIXdhbGxldC5pc0Nvbm5lY3RlZCB8fCAhd2FsbGV0LmFkZHJlc3MgfHwgIWFsZ29kQ2xpZW50IHx8ICFwZXJhV2FsbGV0KSB7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdXYWxsZXQgbm90IGNvbm5lY3RlZCcgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3VnZ2VzdGVkUGFyYW1zID0gYXdhaXQgYWxnb2RDbGllbnQuZ2V0VHJhbnNhY3Rpb25QYXJhbXMoKS5kbygpO1xuICAgICAgXG4gICAgICBjb25zdCBhcHBDYWxsVHhuID0gYWxnb3Nkay5tYWtlQXBwbGljYXRpb25DYWxsVHhuRnJvbU9iamVjdCh7XG4gICAgICAgIGZyb206IHdhbGxldC5hZGRyZXNzLFxuICAgICAgICBhcHBJbmRleDogY29udHJhY3RDb25maWcucG9vbEFwcElkLFxuICAgICAgICBvbkNvbXBsZXRlOiBhbGdvc2RrLk9uQXBwbGljYXRpb25Db21wbGV0ZS5Ob09wT0MsXG4gICAgICAgIGFwcEFyZ3M6IFtcbiAgICAgICAgICBuZXcgVWludDhBcnJheShCdWZmZXIuZnJvbSgncmVtb3ZlX2xpcXVpZGl0eScpKSxcbiAgICAgICAgICBhbGdvc2RrLmVuY29kZVVpbnQ2NChscFRva2VucyksXG4gICAgICAgICAgYWxnb3Nkay5lbmNvZGVVaW50NjQocmFuZ2VJZClcbiAgICAgICAgXSxcbiAgICAgICAgc3VnZ2VzdGVkUGFyYW1zXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc2lnbmVkVHhucyA9IGF3YWl0IHBlcmFXYWxsZXQuc2lnblRyYW5zYWN0aW9uKFthcHBDYWxsVHhuXSk7XG4gICAgICBjb25zdCB7IHR4SWQgfSA9IGF3YWl0IGFsZ29kQ2xpZW50LnNlbmRSYXdUcmFuc2FjdGlvbihzaWduZWRUeG5zKS5kbygpO1xuICAgICAgXG4gICAgICBhd2FpdCBhbGdvc2RrLndhaXRGb3JDb25maXJtYXRpb24oYWxnb2RDbGllbnQsIHR4SWQsIDQpO1xuICAgICAgYXdhaXQgcmVmcmVzaFBvb2xTdGF0ZSgpO1xuICAgICAgXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCB0eElkIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1JlbW92ZSBsaXF1aWRpdHkgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyB9O1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxDb250cmFjdENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3tcbiAgICAgIHBvb2xTdGF0ZSxcbiAgICAgIGlzTG9hZGluZyxcbiAgICAgIHJlZnJlc2hQb29sU3RhdGUsXG4gICAgICBleGVjdXRlU3dhcCxcbiAgICAgIGFkZExpcXVpZGl0eSxcbiAgICAgIHJlbW92ZUxpcXVpZGl0eVxuICAgIH19PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQ29udHJhY3RDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJhbGdvc2RrIiwidXNlV2FsbGV0IiwiZ2V0Q29udHJhY3RDb25maWciLCJDb250cmFjdENvbnRleHQiLCJ1bmRlZmluZWQiLCJ1c2VDb250cmFjdCIsImNvbnRleHQiLCJFcnJvciIsIkNvbnRyYWN0UHJvdmlkZXIiLCJjaGlsZHJlbiIsIndhbGxldCIsImFsZ29kQ2xpZW50IiwicGVyYVdhbGxldCIsInBvb2xTdGF0ZSIsInNldFBvb2xTdGF0ZSIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsImNvbnRyYWN0Q29uZmlnIiwicmVmcmVzaFBvb2xTdGF0ZSIsImFwcEluZm8iLCJnZXRBcHBsaWNhdGlvbkJ5SUQiLCJwb29sQXBwSWQiLCJkbyIsImdsb2JhbFN0YXRlIiwicGFyYW1zIiwicG9vbERhdGEiLCJhcHBJZCIsImFzc2V0WCIsImFzc2V0WElkIiwiYXNzZXRZIiwiYXNzZXRZSWQiLCJjdXJyZW50UHJpY2UiLCJwYXJzZUdsb2JhbFN0YXRlIiwidG90YWxMaXF1aWRpdHkiLCJmZWVSYXRlIiwicmFuZ2VzIiwiaWQiLCJsb3dlciIsInVwcGVyIiwibGlxdWlkaXR5IiwiaXNBY3RpdmUiLCJlcnJvciIsImNvbnNvbGUiLCJrZXkiLCJpdGVtIiwiZmluZCIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsInZhbHVlIiwidWludCIsImV4ZWN1dGVTd2FwIiwiaXNDb25uZWN0ZWQiLCJhZGRyZXNzIiwic3VjY2VzcyIsInN1Z2dlc3RlZFBhcmFtcyIsImdldFRyYW5zYWN0aW9uUGFyYW1zIiwiYXBwQ2FsbFR4biIsIm1ha2VBcHBsaWNhdGlvbkNhbGxUeG5Gcm9tT2JqZWN0IiwiYXBwSW5kZXgiLCJvbkNvbXBsZXRlIiwiT25BcHBsaWNhdGlvbkNvbXBsZXRlIiwiTm9PcE9DIiwiYXBwQXJncyIsIlVpbnQ4QXJyYXkiLCJlbmNvZGVVaW50NjQiLCJhc3NldEluIiwiYXNzZXRPdXQiLCJhbW91bnRJbiIsIm1pbkFtb3VudE91dCIsImRlYWRsaW5lIiwiZm9yZWlnbkFzc2V0cyIsImZpbHRlciIsInNpZ25lZFR4bnMiLCJzaWduVHJhbnNhY3Rpb24iLCJ0eElkIiwic2VuZFJhd1RyYW5zYWN0aW9uIiwid2FpdEZvckNvbmZpcm1hdGlvbiIsIm1lc3NhZ2UiLCJhZGRMaXF1aWRpdHkiLCJhbW91bnRYRGVzaXJlZCIsImFtb3VudFlEZXNpcmVkIiwiYW1vdW50WE1pbiIsImFtb3VudFlNaW4iLCJyYW5nZUlkIiwicmVtb3ZlTGlxdWlkaXR5IiwibHBUb2tlbnMiLCJQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./providers/ContractProvider.tsx\n"));

/***/ })

});